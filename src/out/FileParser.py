# Generated from File.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,61,897,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
        6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
        2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
        7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,
        2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,
        7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,
        2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,1,0,
        5,0,94,8,0,10,0,12,0,97,9,0,1,0,5,0,100,8,0,10,0,12,0,103,9,0,1,
        0,1,0,1,0,1,0,5,0,109,8,0,10,0,12,0,112,9,0,1,0,3,0,115,8,0,1,0,
        1,0,4,0,119,8,0,11,0,12,0,120,1,0,3,0,124,8,0,5,0,126,8,0,10,0,12,
        0,129,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,4,2,141,8,2,11,
        2,12,2,142,1,2,3,2,146,8,2,1,2,1,2,4,2,150,8,2,11,2,12,2,151,1,2,
        3,2,155,8,2,1,2,1,2,4,2,159,8,2,11,2,12,2,160,1,2,3,2,164,8,2,1,
        2,1,2,4,2,168,8,2,11,2,12,2,169,1,2,3,2,173,8,2,1,2,1,2,1,2,4,2,
        178,8,2,11,2,12,2,179,1,2,3,2,183,8,2,3,2,185,8,2,1,3,3,3,188,8,
        3,1,3,1,3,1,3,1,3,5,3,194,8,3,10,3,12,3,197,9,3,1,3,1,3,1,4,1,4,
        1,4,1,4,1,4,3,4,206,8,4,1,4,1,4,1,4,1,4,1,4,3,4,213,8,4,1,4,1,4,
        1,4,1,4,5,4,219,8,4,10,4,12,4,222,9,4,1,4,3,4,225,8,4,1,4,3,4,228,
        8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,237,8,5,1,6,1,6,1,6,1,6,3,6,
        243,8,6,1,6,1,6,3,6,247,8,6,1,6,1,6,1,6,5,6,252,8,6,10,6,12,6,255,
        9,6,1,6,3,6,258,8,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,
        270,8,7,1,8,1,8,3,8,274,8,8,1,9,1,9,1,9,1,9,1,9,5,9,281,8,9,10,9,
        12,9,284,9,9,1,9,1,9,1,9,1,10,3,10,290,8,10,1,10,1,10,3,10,294,8,
        10,1,10,5,10,297,8,10,10,10,12,10,300,9,10,1,10,1,10,1,10,3,10,305,
        8,10,1,10,1,10,1,10,1,11,3,11,311,8,11,1,11,1,11,3,11,315,8,11,1,
        11,5,11,318,8,11,10,11,12,11,321,9,11,1,11,1,11,1,11,3,11,326,8,
        11,1,11,1,11,1,12,1,12,1,12,5,12,333,8,12,10,12,12,12,336,9,12,1,
        13,3,13,339,8,13,1,13,1,13,3,13,343,8,13,1,13,5,13,346,8,13,10,13,
        12,13,349,9,13,1,13,5,13,352,8,13,10,13,12,13,355,9,13,1,13,3,13,
        358,8,13,3,13,360,8,13,1,13,1,13,1,13,3,13,365,8,13,1,14,1,14,1,
        14,3,14,370,8,14,1,14,1,14,1,15,1,15,1,15,5,15,377,8,15,10,15,12,
        15,380,9,15,1,16,1,16,1,16,1,16,1,16,3,16,387,8,16,1,17,1,17,1,17,
        4,17,392,8,17,11,17,12,17,393,1,17,3,17,397,8,17,1,17,1,17,4,17,
        401,8,17,11,17,12,17,402,1,17,3,17,406,8,17,1,17,1,17,5,17,410,8,
        17,10,17,12,17,413,9,17,1,17,3,17,416,8,17,1,17,1,17,5,17,420,8,
        17,10,17,12,17,423,9,17,1,17,3,17,426,8,17,1,17,1,17,5,17,430,8,
        17,10,17,12,17,433,9,17,1,17,3,17,436,8,17,1,17,1,17,5,17,440,8,
        17,10,17,12,17,443,9,17,1,17,3,17,446,8,17,1,17,1,17,4,17,450,8,
        17,11,17,12,17,451,1,17,3,17,455,8,17,1,17,1,17,4,17,459,8,17,11,
        17,12,17,460,1,17,3,17,464,8,17,1,17,1,17,1,17,5,17,469,8,17,10,
        17,12,17,472,9,17,1,17,1,17,1,18,1,18,1,18,4,18,479,8,18,11,18,12,
        18,480,1,18,3,18,484,8,18,1,18,1,18,4,18,488,8,18,11,18,12,18,489,
        1,18,3,18,493,8,18,1,18,1,18,5,18,497,8,18,10,18,12,18,500,9,18,
        1,18,3,18,503,8,18,1,18,1,18,5,18,507,8,18,10,18,12,18,510,9,18,
        1,18,3,18,513,8,18,1,18,1,18,5,18,517,8,18,10,18,12,18,520,9,18,
        1,18,3,18,523,8,18,1,18,1,18,5,18,527,8,18,10,18,12,18,530,9,18,
        1,18,3,18,533,8,18,1,18,1,18,4,18,537,8,18,11,18,12,18,538,1,18,
        3,18,542,8,18,1,18,1,18,4,18,546,8,18,11,18,12,18,547,1,18,3,18,
        551,8,18,1,18,1,18,1,18,1,18,1,18,5,18,558,8,18,10,18,12,18,561,
        9,18,1,18,1,18,1,19,1,19,3,19,567,8,19,1,19,1,19,1,19,5,19,572,8,
        19,10,19,12,19,575,9,19,1,20,1,20,1,20,1,20,1,20,1,20,5,20,583,8,
        20,10,20,12,20,586,9,20,1,20,3,20,589,8,20,1,20,1,20,1,21,1,21,1,
        21,1,21,1,21,1,22,1,22,1,22,1,22,1,23,1,23,4,23,604,8,23,11,23,12,
        23,605,1,23,3,23,609,8,23,1,23,1,23,4,23,613,8,23,11,23,12,23,614,
        1,23,3,23,618,8,23,1,23,1,23,5,23,622,8,23,10,23,12,23,625,9,23,
        1,23,3,23,628,8,23,1,23,1,23,5,23,632,8,23,10,23,12,23,635,9,23,
        1,23,3,23,638,8,23,1,23,1,23,5,23,642,8,23,10,23,12,23,645,9,23,
        1,23,3,23,648,8,23,1,23,1,23,5,23,652,8,23,10,23,12,23,655,9,23,
        1,23,3,23,658,8,23,1,23,1,23,4,23,662,8,23,11,23,12,23,663,1,23,
        3,23,667,8,23,1,23,1,23,4,23,671,8,23,11,23,12,23,672,1,23,3,23,
        676,8,23,1,23,1,23,1,23,1,23,1,23,5,23,683,8,23,10,23,12,23,686,
        9,23,1,24,1,24,1,24,5,24,691,8,24,10,24,12,24,694,9,24,1,25,1,25,
        1,25,5,25,699,8,25,10,25,12,25,702,9,25,1,26,1,26,1,26,1,26,1,26,
        1,26,3,26,710,8,26,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,
        1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,
        1,30,1,30,1,30,3,30,737,8,30,1,31,3,31,740,8,31,1,31,1,31,5,31,744,
        8,31,10,31,12,31,747,9,31,1,31,1,31,1,31,3,31,752,8,31,1,31,1,31,
        1,31,1,31,1,31,1,31,5,31,760,8,31,10,31,12,31,763,9,31,1,31,1,31,
        1,31,1,31,3,31,769,8,31,1,31,1,31,5,31,773,8,31,10,31,12,31,776,
        9,31,1,31,1,31,1,31,1,31,3,31,782,8,31,1,32,1,32,3,32,786,8,32,1,
        33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,798,8,33,1,
        34,1,34,1,34,3,34,803,8,34,1,35,1,35,1,35,3,35,808,8,35,1,35,1,35,
        1,35,1,36,1,36,3,36,815,8,36,1,36,1,36,1,36,3,36,820,8,36,1,36,1,
        36,1,37,1,37,1,37,3,37,827,8,37,1,38,5,38,830,8,38,10,38,12,38,833,
        9,38,1,38,1,38,1,39,1,39,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,
        1,41,1,41,5,41,849,8,41,10,41,12,41,852,9,41,1,42,1,42,1,42,1,42,
        3,42,858,8,42,1,42,1,42,1,42,1,42,1,42,5,42,865,8,42,10,42,12,42,
        868,9,42,1,43,1,43,1,43,3,43,873,8,43,1,44,1,44,1,44,1,44,1,44,1,
        44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,3,44,888,8,44,1,45,1,45,1,
        45,1,45,1,45,3,45,895,8,45,1,45,1,378,2,82,84,46,0,2,4,6,8,10,12,
        14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,
        58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,0,6,2,0,1,1,59,
        59,1,0,41,48,2,0,39,40,47,48,2,0,36,38,41,46,1,0,52,53,2,0,39,40,
        52,53,1049,0,101,1,0,0,0,2,132,1,0,0,0,4,184,1,0,0,0,6,187,1,0,0,
        0,8,227,1,0,0,0,10,236,1,0,0,0,12,238,1,0,0,0,14,269,1,0,0,0,16,
        273,1,0,0,0,18,275,1,0,0,0,20,289,1,0,0,0,22,310,1,0,0,0,24,329,
        1,0,0,0,26,338,1,0,0,0,28,366,1,0,0,0,30,373,1,0,0,0,32,386,1,0,
        0,0,34,388,1,0,0,0,36,475,1,0,0,0,38,564,1,0,0,0,40,576,1,0,0,0,
        42,592,1,0,0,0,44,597,1,0,0,0,46,684,1,0,0,0,48,687,1,0,0,0,50,695,
        1,0,0,0,52,703,1,0,0,0,54,711,1,0,0,0,56,714,1,0,0,0,58,720,1,0,
        0,0,60,736,1,0,0,0,62,781,1,0,0,0,64,785,1,0,0,0,66,797,1,0,0,0,
        68,799,1,0,0,0,70,807,1,0,0,0,72,814,1,0,0,0,74,823,1,0,0,0,76,831,
        1,0,0,0,78,836,1,0,0,0,80,838,1,0,0,0,82,842,1,0,0,0,84,857,1,0,
        0,0,86,872,1,0,0,0,88,887,1,0,0,0,90,894,1,0,0,0,92,94,3,16,8,0,
        93,92,1,0,0,0,94,97,1,0,0,0,95,93,1,0,0,0,95,96,1,0,0,0,96,98,1,
        0,0,0,97,95,1,0,0,0,98,100,3,2,1,0,99,95,1,0,0,0,100,103,1,0,0,0,
        101,99,1,0,0,0,101,102,1,0,0,0,102,127,1,0,0,0,103,101,1,0,0,0,104,
        126,3,16,8,0,105,126,3,4,2,0,106,114,3,20,10,0,107,109,5,1,0,0,108,
        107,1,0,0,0,109,112,1,0,0,0,110,108,1,0,0,0,110,111,1,0,0,0,111,
        115,1,0,0,0,112,110,1,0,0,0,113,115,5,59,0,0,114,110,1,0,0,0,114,
        113,1,0,0,0,115,126,1,0,0,0,116,123,3,22,11,0,117,119,5,1,0,0,118,
        117,1,0,0,0,119,120,1,0,0,0,120,118,1,0,0,0,120,121,1,0,0,0,121,
        124,1,0,0,0,122,124,5,59,0,0,123,118,1,0,0,0,123,122,1,0,0,0,124,
        126,1,0,0,0,125,104,1,0,0,0,125,105,1,0,0,0,125,106,1,0,0,0,125,
        116,1,0,0,0,126,129,1,0,0,0,127,125,1,0,0,0,127,128,1,0,0,0,128,
        130,1,0,0,0,129,127,1,0,0,0,130,131,5,0,0,1,131,1,1,0,0,0,132,133,
        5,25,0,0,133,134,5,41,0,0,134,135,5,29,0,0,135,136,5,2,0,0,136,137,
        5,43,0,0,137,3,1,0,0,0,138,145,3,6,3,0,139,141,5,1,0,0,140,139,1,
        0,0,0,141,142,1,0,0,0,142,140,1,0,0,0,142,143,1,0,0,0,143,146,1,
        0,0,0,144,146,5,59,0,0,145,140,1,0,0,0,145,144,1,0,0,0,146,185,1,
        0,0,0,147,154,3,62,31,0,148,150,5,1,0,0,149,148,1,0,0,0,150,151,
        1,0,0,0,151,149,1,0,0,0,151,152,1,0,0,0,152,155,1,0,0,0,153,155,
        5,59,0,0,154,149,1,0,0,0,154,153,1,0,0,0,155,185,1,0,0,0,156,163,
        3,82,41,0,157,159,5,1,0,0,158,157,1,0,0,0,159,160,1,0,0,0,160,158,
        1,0,0,0,160,161,1,0,0,0,161,164,1,0,0,0,162,164,5,59,0,0,163,158,
        1,0,0,0,163,162,1,0,0,0,164,185,1,0,0,0,165,172,3,70,35,0,166,168,
        5,1,0,0,167,166,1,0,0,0,168,169,1,0,0,0,169,167,1,0,0,0,169,170,
        1,0,0,0,170,173,1,0,0,0,171,173,5,59,0,0,172,167,1,0,0,0,172,171,
        1,0,0,0,173,185,1,0,0,0,174,185,3,36,18,0,175,182,3,18,9,0,176,178,
        5,1,0,0,177,176,1,0,0,0,178,179,1,0,0,0,179,177,1,0,0,0,179,180,
        1,0,0,0,180,183,1,0,0,0,181,183,5,59,0,0,182,177,1,0,0,0,182,181,
        1,0,0,0,183,185,1,0,0,0,184,138,1,0,0,0,184,147,1,0,0,0,184,156,
        1,0,0,0,184,165,1,0,0,0,184,174,1,0,0,0,184,175,1,0,0,0,185,5,1,
        0,0,0,186,188,5,12,0,0,187,186,1,0,0,0,187,188,1,0,0,0,188,189,1,
        0,0,0,189,195,5,26,0,0,190,191,3,68,34,0,191,192,5,3,0,0,192,194,
        1,0,0,0,193,190,1,0,0,0,194,197,1,0,0,0,195,193,1,0,0,0,195,196,
        1,0,0,0,196,198,1,0,0,0,197,195,1,0,0,0,198,199,3,68,34,0,199,7,
        1,0,0,0,200,201,5,22,0,0,201,205,5,4,0,0,202,206,3,78,39,0,203,206,
        3,90,45,0,204,206,5,35,0,0,205,202,1,0,0,0,205,203,1,0,0,0,205,204,
        1,0,0,0,206,207,1,0,0,0,207,228,5,5,0,0,208,209,5,22,0,0,209,212,
        5,4,0,0,210,213,5,34,0,0,211,213,5,35,0,0,212,210,1,0,0,0,212,211,
        1,0,0,0,213,224,1,0,0,0,214,220,5,3,0,0,215,216,3,10,5,0,216,217,
        5,3,0,0,217,219,1,0,0,0,218,215,1,0,0,0,219,222,1,0,0,0,220,218,
        1,0,0,0,220,221,1,0,0,0,221,223,1,0,0,0,222,220,1,0,0,0,223,225,
        3,10,5,0,224,214,1,0,0,0,224,225,1,0,0,0,225,226,1,0,0,0,226,228,
        5,5,0,0,227,200,1,0,0,0,227,208,1,0,0,0,228,9,1,0,0,0,229,237,3,
        78,39,0,230,237,3,90,45,0,231,237,3,72,36,0,232,237,3,74,37,0,233,
        237,3,80,40,0,234,237,3,82,41,0,235,237,5,35,0,0,236,229,1,0,0,0,
        236,230,1,0,0,0,236,231,1,0,0,0,236,232,1,0,0,0,236,233,1,0,0,0,
        236,234,1,0,0,0,236,235,1,0,0,0,237,11,1,0,0,0,238,239,5,24,0,0,
        239,242,5,4,0,0,240,243,5,34,0,0,241,243,5,35,0,0,242,240,1,0,0,
        0,242,241,1,0,0,0,243,244,1,0,0,0,244,253,5,3,0,0,245,247,5,51,0,
        0,246,245,1,0,0,0,246,247,1,0,0,0,247,248,1,0,0,0,248,249,3,14,7,
        0,249,250,5,3,0,0,250,252,1,0,0,0,251,246,1,0,0,0,252,255,1,0,0,
        0,253,251,1,0,0,0,253,254,1,0,0,0,254,257,1,0,0,0,255,253,1,0,0,
        0,256,258,5,51,0,0,257,256,1,0,0,0,257,258,1,0,0,0,258,259,1,0,0,
        0,259,260,3,14,7,0,260,261,5,5,0,0,261,13,1,0,0,0,262,270,3,78,39,
        0,263,270,3,74,37,0,264,270,3,72,36,0,265,266,5,51,0,0,266,270,3,
        78,39,0,267,268,5,51,0,0,268,270,3,74,37,0,269,262,1,0,0,0,269,263,
        1,0,0,0,269,264,1,0,0,0,269,265,1,0,0,0,269,267,1,0,0,0,270,15,1,
        0,0,0,271,274,5,60,0,0,272,274,5,61,0,0,273,271,1,0,0,0,273,272,
        1,0,0,0,274,17,1,0,0,0,275,276,5,28,0,0,276,277,5,29,0,0,277,282,
        5,6,0,0,278,279,5,29,0,0,279,281,5,3,0,0,280,278,1,0,0,0,281,284,
        1,0,0,0,282,280,1,0,0,0,282,283,1,0,0,0,283,285,1,0,0,0,284,282,
        1,0,0,0,285,286,5,29,0,0,286,287,5,7,0,0,287,19,1,0,0,0,288,290,
        5,12,0,0,289,288,1,0,0,0,289,290,1,0,0,0,290,293,1,0,0,0,291,294,
        5,26,0,0,292,294,5,27,0,0,293,291,1,0,0,0,293,292,1,0,0,0,294,298,
        1,0,0,0,295,297,5,36,0,0,296,295,1,0,0,0,297,300,1,0,0,0,298,296,
        1,0,0,0,298,299,1,0,0,0,299,301,1,0,0,0,300,298,1,0,0,0,301,302,
        5,29,0,0,302,304,5,4,0,0,303,305,3,24,12,0,304,303,1,0,0,0,304,305,
        1,0,0,0,305,306,1,0,0,0,306,307,5,5,0,0,307,308,3,34,17,0,308,21,
        1,0,0,0,309,311,5,12,0,0,310,309,1,0,0,0,310,311,1,0,0,0,311,314,
        1,0,0,0,312,315,5,26,0,0,313,315,5,27,0,0,314,312,1,0,0,0,314,313,
        1,0,0,0,315,319,1,0,0,0,316,318,5,36,0,0,317,316,1,0,0,0,318,321,
        1,0,0,0,319,317,1,0,0,0,319,320,1,0,0,0,320,322,1,0,0,0,321,319,
        1,0,0,0,322,323,5,29,0,0,323,325,5,4,0,0,324,326,3,24,12,0,325,324,
        1,0,0,0,325,326,1,0,0,0,326,327,1,0,0,0,327,328,5,5,0,0,328,23,1,
        0,0,0,329,334,3,26,13,0,330,331,5,3,0,0,331,333,3,26,13,0,332,330,
        1,0,0,0,333,336,1,0,0,0,334,332,1,0,0,0,334,335,1,0,0,0,335,25,1,
        0,0,0,336,334,1,0,0,0,337,339,5,12,0,0,338,337,1,0,0,0,338,339,1,
        0,0,0,339,340,1,0,0,0,340,359,5,26,0,0,341,343,5,51,0,0,342,341,
        1,0,0,0,342,343,1,0,0,0,343,347,1,0,0,0,344,346,5,36,0,0,345,344,
        1,0,0,0,346,349,1,0,0,0,347,345,1,0,0,0,347,348,1,0,0,0,348,360,
        1,0,0,0,349,347,1,0,0,0,350,352,5,36,0,0,351,350,1,0,0,0,352,355,
        1,0,0,0,353,351,1,0,0,0,353,354,1,0,0,0,354,357,1,0,0,0,355,353,
        1,0,0,0,356,358,5,51,0,0,357,356,1,0,0,0,357,358,1,0,0,0,358,360,
        1,0,0,0,359,342,1,0,0,0,359,353,1,0,0,0,360,361,1,0,0,0,361,364,
        5,29,0,0,362,363,5,50,0,0,363,365,3,82,41,0,364,362,1,0,0,0,364,
        365,1,0,0,0,365,27,1,0,0,0,366,367,5,29,0,0,367,369,5,4,0,0,368,
        370,3,30,15,0,369,368,1,0,0,0,369,370,1,0,0,0,370,371,1,0,0,0,371,
        372,5,5,0,0,372,29,1,0,0,0,373,378,3,32,16,0,374,375,5,3,0,0,375,
        377,3,32,16,0,376,374,1,0,0,0,377,380,1,0,0,0,378,379,1,0,0,0,378,
        376,1,0,0,0,379,31,1,0,0,0,380,378,1,0,0,0,381,387,3,78,39,0,382,
        387,3,74,37,0,383,387,3,28,14,0,384,387,3,90,45,0,385,387,3,82,41,
        0,386,381,1,0,0,0,386,382,1,0,0,0,386,383,1,0,0,0,386,384,1,0,0,
        0,386,385,1,0,0,0,387,33,1,0,0,0,388,470,5,6,0,0,389,396,3,8,4,0,
        390,392,5,1,0,0,391,390,1,0,0,0,392,393,1,0,0,0,393,391,1,0,0,0,
        393,394,1,0,0,0,394,397,1,0,0,0,395,397,5,59,0,0,396,391,1,0,0,0,
        396,395,1,0,0,0,397,469,1,0,0,0,398,405,3,12,6,0,399,401,5,1,0,0,
        400,399,1,0,0,0,401,402,1,0,0,0,402,400,1,0,0,0,402,403,1,0,0,0,
        403,406,1,0,0,0,404,406,5,59,0,0,405,400,1,0,0,0,405,404,1,0,0,0,
        406,469,1,0,0,0,407,415,3,52,26,0,408,410,5,1,0,0,409,408,1,0,0,
        0,410,413,1,0,0,0,411,409,1,0,0,0,411,412,1,0,0,0,412,416,1,0,0,
        0,413,411,1,0,0,0,414,416,5,59,0,0,415,411,1,0,0,0,415,414,1,0,0,
        0,416,469,1,0,0,0,417,425,3,40,20,0,418,420,5,1,0,0,419,418,1,0,
        0,0,420,423,1,0,0,0,421,419,1,0,0,0,421,422,1,0,0,0,422,426,1,0,
        0,0,423,421,1,0,0,0,424,426,5,59,0,0,425,421,1,0,0,0,425,424,1,0,
        0,0,426,469,1,0,0,0,427,435,3,56,28,0,428,430,5,1,0,0,429,428,1,
        0,0,0,430,433,1,0,0,0,431,429,1,0,0,0,431,432,1,0,0,0,432,436,1,
        0,0,0,433,431,1,0,0,0,434,436,5,59,0,0,435,431,1,0,0,0,435,434,1,
        0,0,0,436,469,1,0,0,0,437,445,3,58,29,0,438,440,5,1,0,0,439,438,
        1,0,0,0,440,443,1,0,0,0,441,439,1,0,0,0,441,442,1,0,0,0,442,446,
        1,0,0,0,443,441,1,0,0,0,444,446,5,59,0,0,445,441,1,0,0,0,445,444,
        1,0,0,0,446,469,1,0,0,0,447,454,3,70,35,0,448,450,5,1,0,0,449,448,
        1,0,0,0,450,451,1,0,0,0,451,449,1,0,0,0,451,452,1,0,0,0,452,455,
        1,0,0,0,453,455,5,59,0,0,454,449,1,0,0,0,454,453,1,0,0,0,455,469,
        1,0,0,0,456,463,3,80,40,0,457,459,5,1,0,0,458,457,1,0,0,0,459,460,
        1,0,0,0,460,458,1,0,0,0,460,461,1,0,0,0,461,464,1,0,0,0,462,464,
        5,59,0,0,463,458,1,0,0,0,463,462,1,0,0,0,464,469,1,0,0,0,465,469,
        3,4,2,0,466,469,3,38,19,0,467,469,3,16,8,0,468,389,1,0,0,0,468,398,
        1,0,0,0,468,407,1,0,0,0,468,417,1,0,0,0,468,427,1,0,0,0,468,437,
        1,0,0,0,468,447,1,0,0,0,468,456,1,0,0,0,468,465,1,0,0,0,468,466,
        1,0,0,0,468,467,1,0,0,0,469,472,1,0,0,0,470,468,1,0,0,0,470,471,
        1,0,0,0,471,473,1,0,0,0,472,470,1,0,0,0,473,474,5,7,0,0,474,35,1,
        0,0,0,475,559,5,6,0,0,476,483,3,8,4,0,477,479,5,1,0,0,478,477,1,
        0,0,0,479,480,1,0,0,0,480,478,1,0,0,0,480,481,1,0,0,0,481,484,1,
        0,0,0,482,484,5,59,0,0,483,478,1,0,0,0,483,482,1,0,0,0,484,558,1,
        0,0,0,485,492,3,12,6,0,486,488,5,1,0,0,487,486,1,0,0,0,488,489,1,
        0,0,0,489,487,1,0,0,0,489,490,1,0,0,0,490,493,1,0,0,0,491,493,5,
        59,0,0,492,487,1,0,0,0,492,491,1,0,0,0,493,558,1,0,0,0,494,502,3,
        52,26,0,495,497,5,1,0,0,496,495,1,0,0,0,497,500,1,0,0,0,498,496,
        1,0,0,0,498,499,1,0,0,0,499,503,1,0,0,0,500,498,1,0,0,0,501,503,
        5,59,0,0,502,498,1,0,0,0,502,501,1,0,0,0,503,558,1,0,0,0,504,512,
        3,40,20,0,505,507,5,1,0,0,506,505,1,0,0,0,507,510,1,0,0,0,508,506,
        1,0,0,0,508,509,1,0,0,0,509,513,1,0,0,0,510,508,1,0,0,0,511,513,
        5,59,0,0,512,508,1,0,0,0,512,511,1,0,0,0,513,558,1,0,0,0,514,522,
        3,56,28,0,515,517,5,1,0,0,516,515,1,0,0,0,517,520,1,0,0,0,518,516,
        1,0,0,0,518,519,1,0,0,0,519,523,1,0,0,0,520,518,1,0,0,0,521,523,
        5,59,0,0,522,518,1,0,0,0,522,521,1,0,0,0,523,558,1,0,0,0,524,532,
        3,58,29,0,525,527,5,1,0,0,526,525,1,0,0,0,527,530,1,0,0,0,528,526,
        1,0,0,0,528,529,1,0,0,0,529,533,1,0,0,0,530,528,1,0,0,0,531,533,
        5,59,0,0,532,528,1,0,0,0,532,531,1,0,0,0,533,558,1,0,0,0,534,541,
        3,70,35,0,535,537,5,1,0,0,536,535,1,0,0,0,537,538,1,0,0,0,538,536,
        1,0,0,0,538,539,1,0,0,0,539,542,1,0,0,0,540,542,5,59,0,0,541,536,
        1,0,0,0,541,540,1,0,0,0,542,558,1,0,0,0,543,550,3,80,40,0,544,546,
        5,1,0,0,545,544,1,0,0,0,546,547,1,0,0,0,547,545,1,0,0,0,547,548,
        1,0,0,0,548,551,1,0,0,0,549,551,5,59,0,0,550,545,1,0,0,0,550,549,
        1,0,0,0,551,558,1,0,0,0,552,558,3,50,25,0,553,558,3,48,24,0,554,
        558,3,4,2,0,555,558,3,38,19,0,556,558,3,16,8,0,557,476,1,0,0,0,557,
        485,1,0,0,0,557,494,1,0,0,0,557,504,1,0,0,0,557,514,1,0,0,0,557,
        524,1,0,0,0,557,534,1,0,0,0,557,543,1,0,0,0,557,552,1,0,0,0,557,
        553,1,0,0,0,557,554,1,0,0,0,557,555,1,0,0,0,557,556,1,0,0,0,558,
        561,1,0,0,0,559,557,1,0,0,0,559,560,1,0,0,0,560,562,1,0,0,0,561,
        559,1,0,0,0,562,563,5,7,0,0,563,37,1,0,0,0,564,566,5,23,0,0,565,
        567,3,82,41,0,566,565,1,0,0,0,566,567,1,0,0,0,567,568,1,0,0,0,568,
        573,5,1,0,0,569,572,3,4,2,0,570,572,3,38,19,0,571,569,1,0,0,0,571,
        570,1,0,0,0,572,575,1,0,0,0,573,571,1,0,0,0,573,574,1,0,0,0,574,
        39,1,0,0,0,575,573,1,0,0,0,576,577,5,19,0,0,577,578,5,4,0,0,578,
        579,3,82,41,0,579,580,5,5,0,0,580,584,5,6,0,0,581,583,3,42,21,0,
        582,581,1,0,0,0,583,586,1,0,0,0,584,582,1,0,0,0,584,585,1,0,0,0,
        585,588,1,0,0,0,586,584,1,0,0,0,587,589,3,44,22,0,588,587,1,0,0,
        0,588,589,1,0,0,0,589,590,1,0,0,0,590,591,5,7,0,0,591,41,1,0,0,0,
        592,593,5,20,0,0,593,594,3,82,41,0,594,595,5,8,0,0,595,596,3,46,
        23,0,596,43,1,0,0,0,597,598,5,21,0,0,598,599,5,8,0,0,599,600,3,46,
        23,0,600,45,1,0,0,0,601,608,3,8,4,0,602,604,5,1,0,0,603,602,1,0,
        0,0,604,605,1,0,0,0,605,603,1,0,0,0,605,606,1,0,0,0,606,609,1,0,
        0,0,607,609,5,59,0,0,608,603,1,0,0,0,608,607,1,0,0,0,609,683,1,0,
        0,0,610,617,3,12,6,0,611,613,5,1,0,0,612,611,1,0,0,0,613,614,1,0,
        0,0,614,612,1,0,0,0,614,615,1,0,0,0,615,618,1,0,0,0,616,618,5,59,
        0,0,617,612,1,0,0,0,617,616,1,0,0,0,618,683,1,0,0,0,619,627,3,52,
        26,0,620,622,5,1,0,0,621,620,1,0,0,0,622,625,1,0,0,0,623,621,1,0,
        0,0,623,624,1,0,0,0,624,628,1,0,0,0,625,623,1,0,0,0,626,628,5,59,
        0,0,627,623,1,0,0,0,627,626,1,0,0,0,628,683,1,0,0,0,629,637,3,40,
        20,0,630,632,5,1,0,0,631,630,1,0,0,0,632,635,1,0,0,0,633,631,1,0,
        0,0,633,634,1,0,0,0,634,638,1,0,0,0,635,633,1,0,0,0,636,638,5,59,
        0,0,637,633,1,0,0,0,637,636,1,0,0,0,638,683,1,0,0,0,639,647,3,56,
        28,0,640,642,5,1,0,0,641,640,1,0,0,0,642,645,1,0,0,0,643,641,1,0,
        0,0,643,644,1,0,0,0,644,648,1,0,0,0,645,643,1,0,0,0,646,648,5,59,
        0,0,647,643,1,0,0,0,647,646,1,0,0,0,648,683,1,0,0,0,649,657,3,58,
        29,0,650,652,5,1,0,0,651,650,1,0,0,0,652,655,1,0,0,0,653,651,1,0,
        0,0,653,654,1,0,0,0,654,658,1,0,0,0,655,653,1,0,0,0,656,658,5,59,
        0,0,657,653,1,0,0,0,657,656,1,0,0,0,658,683,1,0,0,0,659,666,3,70,
        35,0,660,662,5,1,0,0,661,660,1,0,0,0,662,663,1,0,0,0,663,661,1,0,
        0,0,663,664,1,0,0,0,664,667,1,0,0,0,665,667,5,59,0,0,666,661,1,0,
        0,0,666,665,1,0,0,0,667,683,1,0,0,0,668,675,3,80,40,0,669,671,5,
        1,0,0,670,669,1,0,0,0,671,672,1,0,0,0,672,670,1,0,0,0,672,673,1,
        0,0,0,673,676,1,0,0,0,674,676,5,59,0,0,675,670,1,0,0,0,675,674,1,
        0,0,0,676,683,1,0,0,0,677,683,3,50,25,0,678,683,3,48,24,0,679,683,
        3,4,2,0,680,683,3,38,19,0,681,683,3,16,8,0,682,601,1,0,0,0,682,610,
        1,0,0,0,682,619,1,0,0,0,682,629,1,0,0,0,682,639,1,0,0,0,682,649,
        1,0,0,0,682,659,1,0,0,0,682,668,1,0,0,0,682,677,1,0,0,0,682,678,
        1,0,0,0,682,679,1,0,0,0,682,680,1,0,0,0,682,681,1,0,0,0,683,686,
        1,0,0,0,684,682,1,0,0,0,684,685,1,0,0,0,685,47,1,0,0,0,686,684,1,
        0,0,0,687,688,5,18,0,0,688,692,7,0,0,0,689,691,3,4,2,0,690,689,1,
        0,0,0,691,694,1,0,0,0,692,690,1,0,0,0,692,693,1,0,0,0,693,49,1,0,
        0,0,694,692,1,0,0,0,695,696,5,17,0,0,696,700,7,0,0,0,697,699,3,4,
        2,0,698,697,1,0,0,0,699,702,1,0,0,0,700,698,1,0,0,0,700,701,1,0,
        0,0,701,51,1,0,0,0,702,700,1,0,0,0,703,704,5,13,0,0,704,705,5,4,
        0,0,705,706,3,64,32,0,706,707,5,5,0,0,707,709,3,36,18,0,708,710,
        3,54,27,0,709,708,1,0,0,0,709,710,1,0,0,0,710,53,1,0,0,0,711,712,
        5,14,0,0,712,713,3,36,18,0,713,55,1,0,0,0,714,715,5,16,0,0,715,716,
        5,4,0,0,716,717,3,64,32,0,717,718,5,5,0,0,718,719,3,36,18,0,719,
        57,1,0,0,0,720,721,5,15,0,0,721,722,5,4,0,0,722,723,3,60,30,0,723,
        724,5,1,0,0,724,725,3,64,32,0,725,726,5,1,0,0,726,727,3,66,33,0,
        727,728,5,5,0,0,728,729,3,36,18,0,729,59,1,0,0,0,730,731,5,26,0,
        0,731,732,3,76,38,0,732,733,5,50,0,0,733,734,3,82,41,0,734,737,1,
        0,0,0,735,737,3,70,35,0,736,730,1,0,0,0,736,735,1,0,0,0,737,61,1,
        0,0,0,738,740,5,12,0,0,739,738,1,0,0,0,739,740,1,0,0,0,740,741,1,
        0,0,0,741,745,5,26,0,0,742,744,5,36,0,0,743,742,1,0,0,0,744,747,
        1,0,0,0,745,743,1,0,0,0,745,746,1,0,0,0,746,748,1,0,0,0,747,745,
        1,0,0,0,748,749,5,29,0,0,749,751,5,9,0,0,750,752,5,30,0,0,751,750,
        1,0,0,0,751,752,1,0,0,0,752,753,1,0,0,0,753,754,5,10,0,0,754,755,
        5,50,0,0,755,761,5,6,0,0,756,757,3,90,45,0,757,758,5,3,0,0,758,760,
        1,0,0,0,759,756,1,0,0,0,760,763,1,0,0,0,761,759,1,0,0,0,761,762,
        1,0,0,0,762,764,1,0,0,0,763,761,1,0,0,0,764,765,3,90,45,0,765,766,
        5,7,0,0,766,782,1,0,0,0,767,769,5,12,0,0,768,767,1,0,0,0,768,769,
        1,0,0,0,769,770,1,0,0,0,770,774,5,26,0,0,771,773,5,36,0,0,772,771,
        1,0,0,0,773,776,1,0,0,0,774,772,1,0,0,0,774,775,1,0,0,0,775,777,
        1,0,0,0,776,774,1,0,0,0,777,778,5,29,0,0,778,779,5,9,0,0,779,780,
        5,30,0,0,780,782,5,10,0,0,781,739,1,0,0,0,781,768,1,0,0,0,782,63,
        1,0,0,0,783,786,3,80,40,0,784,786,3,82,41,0,785,783,1,0,0,0,785,
        784,1,0,0,0,786,65,1,0,0,0,787,788,5,52,0,0,788,798,3,78,39,0,789,
        790,5,53,0,0,790,798,3,78,39,0,791,792,3,78,39,0,792,793,5,52,0,
        0,793,798,1,0,0,0,794,795,3,78,39,0,795,796,5,53,0,0,796,798,1,0,
        0,0,797,787,1,0,0,0,797,789,1,0,0,0,797,791,1,0,0,0,797,794,1,0,
        0,0,798,67,1,0,0,0,799,802,3,76,38,0,800,801,5,50,0,0,801,803,3,
        82,41,0,802,800,1,0,0,0,802,803,1,0,0,0,803,69,1,0,0,0,804,808,3,
        78,39,0,805,808,3,74,37,0,806,808,3,72,36,0,807,804,1,0,0,0,807,
        805,1,0,0,0,807,806,1,0,0,0,808,809,1,0,0,0,809,810,5,50,0,0,810,
        811,3,82,41,0,811,71,1,0,0,0,812,815,3,76,38,0,813,815,3,74,37,0,
        814,812,1,0,0,0,814,813,1,0,0,0,815,816,1,0,0,0,816,819,5,9,0,0,
        817,820,5,30,0,0,818,820,3,82,41,0,819,817,1,0,0,0,819,818,1,0,0,
        0,820,821,1,0,0,0,821,822,5,10,0,0,822,73,1,0,0,0,823,826,5,36,0,
        0,824,827,3,74,37,0,825,827,3,78,39,0,826,824,1,0,0,0,826,825,1,
        0,0,0,827,75,1,0,0,0,828,830,5,36,0,0,829,828,1,0,0,0,830,833,1,
        0,0,0,831,829,1,0,0,0,831,832,1,0,0,0,832,834,1,0,0,0,833,831,1,
        0,0,0,834,835,5,29,0,0,835,77,1,0,0,0,836,837,5,29,0,0,837,79,1,
        0,0,0,838,839,3,82,41,0,839,840,7,1,0,0,840,841,3,82,41,0,841,81,
        1,0,0,0,842,843,6,41,-1,0,843,844,3,84,42,0,844,850,1,0,0,0,845,
        846,10,1,0,0,846,847,7,2,0,0,847,849,3,84,42,0,848,845,1,0,0,0,849,
        852,1,0,0,0,850,848,1,0,0,0,850,851,1,0,0,0,851,83,1,0,0,0,852,850,
        1,0,0,0,853,854,6,42,-1,0,854,858,3,86,43,0,855,856,5,49,0,0,856,
        858,3,86,43,0,857,853,1,0,0,0,857,855,1,0,0,0,858,866,1,0,0,0,859,
        860,10,4,0,0,860,861,7,3,0,0,861,865,3,86,43,0,862,863,10,1,0,0,
        863,865,7,4,0,0,864,859,1,0,0,0,864,862,1,0,0,0,865,868,1,0,0,0,
        866,864,1,0,0,0,866,867,1,0,0,0,867,85,1,0,0,0,868,866,1,0,0,0,869,
        873,3,88,44,0,870,871,7,5,0,0,871,873,3,86,43,0,872,869,1,0,0,0,
        872,870,1,0,0,0,873,87,1,0,0,0,874,888,3,78,39,0,875,888,3,90,45,
        0,876,877,5,51,0,0,877,888,3,78,39,0,878,888,3,74,37,0,879,880,5,
        4,0,0,880,881,3,82,41,0,881,882,5,5,0,0,882,888,1,0,0,0,883,884,
        5,11,0,0,884,888,3,88,44,0,885,888,3,28,14,0,886,888,3,72,36,0,887,
        874,1,0,0,0,887,875,1,0,0,0,887,876,1,0,0,0,887,878,1,0,0,0,887,
        879,1,0,0,0,887,883,1,0,0,0,887,885,1,0,0,0,887,886,1,0,0,0,888,
        89,1,0,0,0,889,895,5,30,0,0,890,895,5,31,0,0,891,895,5,32,0,0,892,
        895,5,33,0,0,893,895,5,35,0,0,894,889,1,0,0,0,894,890,1,0,0,0,894,
        891,1,0,0,0,894,892,1,0,0,0,894,893,1,0,0,0,895,91,1,0,0,0,138,95,
        101,110,114,120,123,125,127,142,145,151,154,160,163,169,172,179,
        182,184,187,195,205,212,220,224,227,236,242,246,253,257,269,273,
        282,289,293,298,304,310,314,319,325,334,338,342,347,353,357,359,
        364,369,378,386,393,396,402,405,411,415,421,425,431,435,441,445,
        451,454,460,463,468,470,480,483,489,492,498,502,508,512,518,522,
        528,532,538,541,547,550,557,559,566,571,573,584,588,605,608,614,
        617,623,627,633,637,643,647,653,657,663,666,672,675,682,684,692,
        700,709,736,739,745,751,761,768,774,781,785,797,802,807,814,819,
        826,831,850,857,864,866,872,887,894
    ]

class FileParser ( Parser ):

    grammarFileName = "File.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "';'", "'.h'", "','", "'('", "')'", "'{'", 
                     "'}'", "':'", "'['", "']'", "<INVALID>", "'const'", 
                     "'if'", "'else'", "'for'", "'while'", "'break'", "'continue'", 
                     "'switch'", "'case'", "'default'", "'printf'", "'return'", 
                     "'scanf'", "'#include'", "<INVALID>", "'void'", "'enum'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'*'", "'/'", 
                     "'%'", "'+'", "'-'", "'<'", "'<='", "'>'", "'>='", 
                     "'=='", "'!='", "'||'", "'&&'", "'!'", "'='", "'&'", 
                     "'++'", "'--'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "CAST", "CONST", 
                      "IF", "ELSE", "FOR", "WHILE", "BREAK", "CONTINUE", 
                      "SWITCH", "CASE", "DEFAULT", "PRINTF", "RETURN", "SCANF", 
                      "INCLUDE", "TYPE", "VOID", "ENUM", "VAR_NAME", "INT", 
                      "FLOAT", "CHAR", "BOOL", "SCANF_STRING", "STRING", 
                      "STR", "DIV", "MOD", "SUM", "DIF", "LT", "LEQ", "GT", 
                      "GEQ", "EQ", "NEQ", "OR_OP", "AND_OP", "NOT_OP", "ASSIGN", 
                      "ADDR", "INCR", "DECR", "SP", "NEWLINE", "WS", "UNICODE_WS", 
                      "LN", "DELIM", "COMMENT", "LCOMMENT" ]

    RULE_file = 0
    RULE_incl_stat = 1
    RULE_instr = 2
    RULE_declr = 3
    RULE_printf = 4
    RULE_printf_arg = 5
    RULE_scanf = 6
    RULE_scanf_arg = 7
    RULE_comment = 8
    RULE_enum_declr = 9
    RULE_func_defn = 10
    RULE_func_decl = 11
    RULE_param_list = 12
    RULE_param_declr = 13
    RULE_func_call = 14
    RULE_arg_list = 15
    RULE_func_arg = 16
    RULE_func_scope = 17
    RULE_scope = 18
    RULE_return_instr = 19
    RULE_switch_instr = 20
    RULE_case_instr = 21
    RULE_default_instr = 22
    RULE_switch_scope = 23
    RULE_cont_instr = 24
    RULE_break_instr = 25
    RULE_if_cond = 26
    RULE_else_cond = 27
    RULE_while_loop = 28
    RULE_for_loop = 29
    RULE_init = 30
    RULE_array_decl = 31
    RULE_cond = 32
    RULE_incr = 33
    RULE_var_decl = 34
    RULE_assign = 35
    RULE_array_el = 36
    RULE_deref = 37
    RULE_lvar = 38
    RULE_rvar = 39
    RULE_comp = 40
    RULE_expr = 41
    RULE_term = 42
    RULE_factor = 43
    RULE_primary = 44
    RULE_rtype = 45

    ruleNames =  [ "file", "incl_stat", "instr", "declr", "printf", "printf_arg", 
                   "scanf", "scanf_arg", "comment", "enum_declr", "func_defn", 
                   "func_decl", "param_list", "param_declr", "func_call", 
                   "arg_list", "func_arg", "func_scope", "scope", "return_instr", 
                   "switch_instr", "case_instr", "default_instr", "switch_scope", 
                   "cont_instr", "break_instr", "if_cond", "else_cond", 
                   "while_loop", "for_loop", "init", "array_decl", "cond", 
                   "incr", "var_decl", "assign", "array_el", "deref", "lvar", 
                   "rvar", "comp", "expr", "term", "factor", "primary", 
                   "rtype" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    CAST=11
    CONST=12
    IF=13
    ELSE=14
    FOR=15
    WHILE=16
    BREAK=17
    CONTINUE=18
    SWITCH=19
    CASE=20
    DEFAULT=21
    PRINTF=22
    RETURN=23
    SCANF=24
    INCLUDE=25
    TYPE=26
    VOID=27
    ENUM=28
    VAR_NAME=29
    INT=30
    FLOAT=31
    CHAR=32
    BOOL=33
    SCANF_STRING=34
    STRING=35
    STR=36
    DIV=37
    MOD=38
    SUM=39
    DIF=40
    LT=41
    LEQ=42
    GT=43
    GEQ=44
    EQ=45
    NEQ=46
    OR_OP=47
    AND_OP=48
    NOT_OP=49
    ASSIGN=50
    ADDR=51
    INCR=52
    DECR=53
    SP=54
    NEWLINE=55
    WS=56
    UNICODE_WS=57
    LN=58
    DELIM=59
    COMMENT=60
    LCOMMENT=61

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class FileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(FileParser.EOF, 0)

        def incl_stat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FileParser.Incl_statContext)
            else:
                return self.getTypedRuleContext(FileParser.Incl_statContext,i)


        def comment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FileParser.CommentContext)
            else:
                return self.getTypedRuleContext(FileParser.CommentContext,i)


        def instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FileParser.InstrContext)
            else:
                return self.getTypedRuleContext(FileParser.InstrContext,i)


        def func_defn(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FileParser.Func_defnContext)
            else:
                return self.getTypedRuleContext(FileParser.Func_defnContext,i)


        def func_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FileParser.Func_declContext)
            else:
                return self.getTypedRuleContext(FileParser.Func_declContext,i)


        def DELIM(self, i:int=None):
            if i is None:
                return self.getTokens(FileParser.DELIM)
            else:
                return self.getToken(FileParser.DELIM, i)

        def getRuleIndex(self):
            return FileParser.RULE_file

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile" ):
                listener.enterFile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile" ):
                listener.exitFile(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFile" ):
                return visitor.visitFile(self)
            else:
                return visitor.visitChildren(self)




    def file_(self):

        localctx = FileParser.FileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_file)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 101
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 95
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==60 or _la==61:
                        self.state = 92
                        self.comment()
                        self.state = 97
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 98
                    self.incl_stat() 
                self.state = 103
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1,self._ctx)

            self.state = 127
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 3475091831929182288) != 0):
                self.state = 125
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
                if la_ == 1:
                    self.state = 104
                    self.comment()
                    pass

                elif la_ == 2:
                    self.state = 105
                    self.instr()
                    pass

                elif la_ == 3:
                    self.state = 106
                    self.func_defn()
                    self.state = 114
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [-1, 1, 4, 6, 11, 12, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 39, 40, 49, 51, 52, 53, 60, 61]:
                        self.state = 110
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 107
                            self.match(FileParser.T__0)
                            self.state = 112
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [59]:
                        self.state = 113
                        self.match(FileParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 4:
                    self.state = 116
                    self.func_decl()
                    self.state = 123
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 118 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 117
                            self.match(FileParser.T__0)
                            self.state = 120 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [59]:
                        self.state = 122
                        self.match(FileParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass


                self.state = 129
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 130
            self.match(FileParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Incl_statContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.library = None # Token

        def INCLUDE(self):
            return self.getToken(FileParser.INCLUDE, 0)

        def LT(self):
            return self.getToken(FileParser.LT, 0)

        def GT(self):
            return self.getToken(FileParser.GT, 0)

        def VAR_NAME(self):
            return self.getToken(FileParser.VAR_NAME, 0)

        def getRuleIndex(self):
            return FileParser.RULE_incl_stat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIncl_stat" ):
                listener.enterIncl_stat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIncl_stat" ):
                listener.exitIncl_stat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIncl_stat" ):
                return visitor.visitIncl_stat(self)
            else:
                return visitor.visitChildren(self)




    def incl_stat(self):

        localctx = FileParser.Incl_statContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_incl_stat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 132
            self.match(FileParser.INCLUDE)
            self.state = 133
            self.match(FileParser.LT)
            self.state = 134
            localctx.library = self.match(FileParser.VAR_NAME)
            self.state = 135
            self.match(FileParser.T__1)
            self.state = 136
            self.match(FileParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InstrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declr(self):
            return self.getTypedRuleContext(FileParser.DeclrContext,0)


        def DELIM(self):
            return self.getToken(FileParser.DELIM, 0)

        def array_decl(self):
            return self.getTypedRuleContext(FileParser.Array_declContext,0)


        def expr(self):
            return self.getTypedRuleContext(FileParser.ExprContext,0)


        def assign(self):
            return self.getTypedRuleContext(FileParser.AssignContext,0)


        def scope(self):
            return self.getTypedRuleContext(FileParser.ScopeContext,0)


        def enum_declr(self):
            return self.getTypedRuleContext(FileParser.Enum_declrContext,0)


        def getRuleIndex(self):
            return FileParser.RULE_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstr" ):
                listener.enterInstr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstr" ):
                listener.exitInstr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInstr" ):
                return visitor.visitInstr(self)
            else:
                return visitor.visitChildren(self)




    def instr(self):

        localctx = FileParser.InstrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_instr)
        self._la = 0 # Token type
        try:
            self.state = 184
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 138
                self.declr()
                self.state = 145
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1]:
                    self.state = 140 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 139
                        self.match(FileParser.T__0)
                        self.state = 142 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==1):
                            break

                    pass
                elif token in [59]:
                    self.state = 144
                    self.match(FileParser.DELIM)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 147
                self.array_decl()
                self.state = 154
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1]:
                    self.state = 149 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 148
                        self.match(FileParser.T__0)
                        self.state = 151 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==1):
                            break

                    pass
                elif token in [59]:
                    self.state = 153
                    self.match(FileParser.DELIM)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 156
                self.expr(0)
                self.state = 163
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1]:
                    self.state = 158 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 157
                        self.match(FileParser.T__0)
                        self.state = 160 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==1):
                            break

                    pass
                elif token in [59]:
                    self.state = 162
                    self.match(FileParser.DELIM)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 165
                self.assign()
                self.state = 172
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1]:
                    self.state = 167 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 166
                        self.match(FileParser.T__0)
                        self.state = 169 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==1):
                            break

                    pass
                elif token in [59]:
                    self.state = 171
                    self.match(FileParser.DELIM)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 174
                self.scope()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 175
                self.enum_declr()
                self.state = 182
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1]:
                    self.state = 177 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 176
                        self.match(FileParser.T__0)
                        self.state = 179 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==1):
                            break

                    pass
                elif token in [59]:
                    self.state = 181
                    self.match(FileParser.DELIM)
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(FileParser.TYPE, 0)

        def var_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FileParser.Var_declContext)
            else:
                return self.getTypedRuleContext(FileParser.Var_declContext,i)


        def CONST(self):
            return self.getToken(FileParser.CONST, 0)

        def getRuleIndex(self):
            return FileParser.RULE_declr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclr" ):
                listener.enterDeclr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclr" ):
                listener.exitDeclr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclr" ):
                return visitor.visitDeclr(self)
            else:
                return visitor.visitChildren(self)




    def declr(self):

        localctx = FileParser.DeclrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_declr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 187
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 186
                self.match(FileParser.CONST)


            self.state = 189
            self.match(FileParser.TYPE)
            self.state = 195
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,20,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 190
                    self.var_decl()
                    self.state = 191
                    self.match(FileParser.T__2) 
                self.state = 197
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,20,self._ctx)

            self.state = 198
            self.var_decl()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrintfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.print_val = None # Token
            self.format_string = None # Token
            self._printf_arg = None # Printf_argContext
            self.vars_ = list() # of Printf_argContexts

        def PRINTF(self):
            return self.getToken(FileParser.PRINTF, 0)

        def rvar(self):
            return self.getTypedRuleContext(FileParser.RvarContext,0)


        def rtype(self):
            return self.getTypedRuleContext(FileParser.RtypeContext,0)


        def STRING(self):
            return self.getToken(FileParser.STRING, 0)

        def SCANF_STRING(self):
            return self.getToken(FileParser.SCANF_STRING, 0)

        def printf_arg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FileParser.Printf_argContext)
            else:
                return self.getTypedRuleContext(FileParser.Printf_argContext,i)


        def getRuleIndex(self):
            return FileParser.RULE_printf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrintf" ):
                listener.enterPrintf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrintf" ):
                listener.exitPrintf(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrintf" ):
                return visitor.visitPrintf(self)
            else:
                return visitor.visitChildren(self)




    def printf(self):

        localctx = FileParser.PrintfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_printf)
        self._la = 0 # Token type
        try:
            self.state = 227
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 200
                self.match(FileParser.PRINTF)
                self.state = 201
                self.match(FileParser.T__3)
                self.state = 205
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
                if la_ == 1:
                    self.state = 202
                    self.rvar()
                    pass

                elif la_ == 2:
                    self.state = 203
                    self.rtype()
                    pass

                elif la_ == 3:
                    self.state = 204
                    localctx.print_val = self.match(FileParser.STRING)
                    pass


                self.state = 207
                self.match(FileParser.T__4)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 208
                self.match(FileParser.PRINTF)
                self.state = 209
                self.match(FileParser.T__3)
                self.state = 212
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [34]:
                    self.state = 210
                    localctx.format_string = self.match(FileParser.SCANF_STRING)
                    pass
                elif token in [35]:
                    self.state = 211
                    localctx.format_string = self.match(FileParser.STRING)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 224
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==3:
                    self.state = 214
                    self.match(FileParser.T__2)
                    self.state = 220
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,23,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 215
                            localctx._printf_arg = self.printf_arg()
                            localctx.vars_.append(localctx._printf_arg)
                            self.state = 216
                            self.match(FileParser.T__2) 
                        self.state = 222
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,23,self._ctx)

                    self.state = 223
                    localctx._printf_arg = self.printf_arg()
                    localctx.vars_.append(localctx._printf_arg)


                self.state = 226
                self.match(FileParser.T__4)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Printf_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rvar(self):
            return self.getTypedRuleContext(FileParser.RvarContext,0)


        def rtype(self):
            return self.getTypedRuleContext(FileParser.RtypeContext,0)


        def array_el(self):
            return self.getTypedRuleContext(FileParser.Array_elContext,0)


        def deref(self):
            return self.getTypedRuleContext(FileParser.DerefContext,0)


        def comp(self):
            return self.getTypedRuleContext(FileParser.CompContext,0)


        def expr(self):
            return self.getTypedRuleContext(FileParser.ExprContext,0)


        def STRING(self):
            return self.getToken(FileParser.STRING, 0)

        def getRuleIndex(self):
            return FileParser.RULE_printf_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrintf_arg" ):
                listener.enterPrintf_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrintf_arg" ):
                listener.exitPrintf_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrintf_arg" ):
                return visitor.visitPrintf_arg(self)
            else:
                return visitor.visitChildren(self)




    def printf_arg(self):

        localctx = FileParser.Printf_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_printf_arg)
        try:
            self.state = 236
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 229
                self.rvar()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 230
                self.rtype()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 231
                self.array_el()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 232
                self.deref()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 233
                self.comp()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 234
                self.expr(0)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 235
                self.match(FileParser.STRING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScanfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.format_string = None # Token
            self._scanf_arg = None # Scanf_argContext
            self.vars_ = list() # of Scanf_argContexts

        def SCANF(self):
            return self.getToken(FileParser.SCANF, 0)

        def scanf_arg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FileParser.Scanf_argContext)
            else:
                return self.getTypedRuleContext(FileParser.Scanf_argContext,i)


        def SCANF_STRING(self):
            return self.getToken(FileParser.SCANF_STRING, 0)

        def STRING(self):
            return self.getToken(FileParser.STRING, 0)

        def ADDR(self, i:int=None):
            if i is None:
                return self.getTokens(FileParser.ADDR)
            else:
                return self.getToken(FileParser.ADDR, i)

        def getRuleIndex(self):
            return FileParser.RULE_scanf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScanf" ):
                listener.enterScanf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScanf" ):
                listener.exitScanf(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScanf" ):
                return visitor.visitScanf(self)
            else:
                return visitor.visitChildren(self)




    def scanf(self):

        localctx = FileParser.ScanfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_scanf)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 238
            self.match(FileParser.SCANF)
            self.state = 239
            self.match(FileParser.T__3)
            self.state = 242
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [34]:
                self.state = 240
                localctx.format_string = self.match(FileParser.SCANF_STRING)
                pass
            elif token in [35]:
                self.state = 241
                localctx.format_string = self.match(FileParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 244
            self.match(FileParser.T__2)
            self.state = 253
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,29,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 246
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
                    if la_ == 1:
                        self.state = 245
                        self.match(FileParser.ADDR)


                    self.state = 248
                    localctx._scanf_arg = self.scanf_arg()
                    localctx.vars_.append(localctx._scanf_arg)
                    self.state = 249
                    self.match(FileParser.T__2) 
                self.state = 255
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,29,self._ctx)

            self.state = 257
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.state = 256
                self.match(FileParser.ADDR)


            self.state = 259
            localctx._scanf_arg = self.scanf_arg()
            localctx.vars_.append(localctx._scanf_arg)
            self.state = 260
            self.match(FileParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Scanf_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rvar(self):
            return self.getTypedRuleContext(FileParser.RvarContext,0)


        def deref(self):
            return self.getTypedRuleContext(FileParser.DerefContext,0)


        def array_el(self):
            return self.getTypedRuleContext(FileParser.Array_elContext,0)


        def ADDR(self):
            return self.getToken(FileParser.ADDR, 0)

        def getRuleIndex(self):
            return FileParser.RULE_scanf_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScanf_arg" ):
                listener.enterScanf_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScanf_arg" ):
                listener.exitScanf_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScanf_arg" ):
                return visitor.visitScanf_arg(self)
            else:
                return visitor.visitChildren(self)




    def scanf_arg(self):

        localctx = FileParser.Scanf_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_scanf_arg)
        try:
            self.state = 269
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 262
                self.rvar()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 263
                self.deref()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 264
                self.array_el()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 265
                self.match(FileParser.ADDR)
                self.state = 266
                self.rvar()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 267
                self.match(FileParser.ADDR)
                self.state = 268
                self.deref()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.com = None # Token

        def COMMENT(self):
            return self.getToken(FileParser.COMMENT, 0)

        def LCOMMENT(self):
            return self.getToken(FileParser.LCOMMENT, 0)

        def getRuleIndex(self):
            return FileParser.RULE_comment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComment" ):
                listener.enterComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComment" ):
                listener.exitComment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComment" ):
                return visitor.visitComment(self)
            else:
                return visitor.visitChildren(self)




    def comment(self):

        localctx = FileParser.CommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_comment)
        try:
            self.state = 273
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [60]:
                self.enterOuterAlt(localctx, 1)
                self.state = 271
                localctx.com = self.match(FileParser.COMMENT)
                pass
            elif token in [61]:
                self.enterOuterAlt(localctx, 2)
                self.state = 272
                localctx.com = self.match(FileParser.LCOMMENT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enum_declrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._VAR_NAME = None # Token
            self.enum_val = list() # of Tokens

        def ENUM(self):
            return self.getToken(FileParser.ENUM, 0)

        def VAR_NAME(self, i:int=None):
            if i is None:
                return self.getTokens(FileParser.VAR_NAME)
            else:
                return self.getToken(FileParser.VAR_NAME, i)

        def getRuleIndex(self):
            return FileParser.RULE_enum_declr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_declr" ):
                listener.enterEnum_declr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_declr" ):
                listener.exitEnum_declr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnum_declr" ):
                return visitor.visitEnum_declr(self)
            else:
                return visitor.visitChildren(self)




    def enum_declr(self):

        localctx = FileParser.Enum_declrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_enum_declr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 275
            self.match(FileParser.ENUM)
            self.state = 276
            self.match(FileParser.VAR_NAME)
            self.state = 277
            self.match(FileParser.T__5)
            self.state = 282
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,33,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 278
                    localctx._VAR_NAME = self.match(FileParser.VAR_NAME)
                    localctx.enum_val.append(localctx._VAR_NAME)
                    self.state = 279
                    self.match(FileParser.T__2) 
                self.state = 284
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,33,self._ctx)

            self.state = 285
            localctx._VAR_NAME = self.match(FileParser.VAR_NAME)
            localctx.enum_val.append(localctx._VAR_NAME)
            self.state = 286
            self.match(FileParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_defnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.const = None # Token
            self.type_ = None # Token
            self._STR = None # Token
            self.ptr = list() # of Tokens
            self.name = None # Token
            self.params = None # Param_listContext

        def func_scope(self):
            return self.getTypedRuleContext(FileParser.Func_scopeContext,0)


        def VAR_NAME(self):
            return self.getToken(FileParser.VAR_NAME, 0)

        def TYPE(self):
            return self.getToken(FileParser.TYPE, 0)

        def VOID(self):
            return self.getToken(FileParser.VOID, 0)

        def CONST(self):
            return self.getToken(FileParser.CONST, 0)

        def STR(self, i:int=None):
            if i is None:
                return self.getTokens(FileParser.STR)
            else:
                return self.getToken(FileParser.STR, i)

        def param_list(self):
            return self.getTypedRuleContext(FileParser.Param_listContext,0)


        def getRuleIndex(self):
            return FileParser.RULE_func_defn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_defn" ):
                listener.enterFunc_defn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_defn" ):
                listener.exitFunc_defn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_defn" ):
                return visitor.visitFunc_defn(self)
            else:
                return visitor.visitChildren(self)




    def func_defn(self):

        localctx = FileParser.Func_defnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_func_defn)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 289
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 288
                localctx.const = self.match(FileParser.CONST)


            self.state = 293
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [26]:
                self.state = 291
                localctx.type_ = self.match(FileParser.TYPE)
                pass
            elif token in [27]:
                self.state = 292
                localctx.type_ = self.match(FileParser.VOID)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 298
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==36:
                self.state = 295
                localctx._STR = self.match(FileParser.STR)
                localctx.ptr.append(localctx._STR)
                self.state = 300
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 301
            localctx.name = self.match(FileParser.VAR_NAME)
            self.state = 302
            self.match(FileParser.T__3)
            self.state = 304
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12 or _la==26:
                self.state = 303
                localctx.params = self.param_list()


            self.state = 306
            self.match(FileParser.T__4)
            self.state = 307
            self.func_scope()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.const = None # Token
            self.type_ = None # Token
            self._STR = None # Token
            self.ptr = list() # of Tokens
            self.name = None # Token
            self.params = None # Param_listContext

        def VAR_NAME(self):
            return self.getToken(FileParser.VAR_NAME, 0)

        def TYPE(self):
            return self.getToken(FileParser.TYPE, 0)

        def VOID(self):
            return self.getToken(FileParser.VOID, 0)

        def CONST(self):
            return self.getToken(FileParser.CONST, 0)

        def STR(self, i:int=None):
            if i is None:
                return self.getTokens(FileParser.STR)
            else:
                return self.getToken(FileParser.STR, i)

        def param_list(self):
            return self.getTypedRuleContext(FileParser.Param_listContext,0)


        def getRuleIndex(self):
            return FileParser.RULE_func_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_decl" ):
                listener.enterFunc_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_decl" ):
                listener.exitFunc_decl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_decl" ):
                return visitor.visitFunc_decl(self)
            else:
                return visitor.visitChildren(self)




    def func_decl(self):

        localctx = FileParser.Func_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_func_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 310
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 309
                localctx.const = self.match(FileParser.CONST)


            self.state = 314
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [26]:
                self.state = 312
                localctx.type_ = self.match(FileParser.TYPE)
                pass
            elif token in [27]:
                self.state = 313
                localctx.type_ = self.match(FileParser.VOID)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 319
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==36:
                self.state = 316
                localctx._STR = self.match(FileParser.STR)
                localctx.ptr.append(localctx._STR)
                self.state = 321
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 322
            localctx.name = self.match(FileParser.VAR_NAME)
            self.state = 323
            self.match(FileParser.T__3)
            self.state = 325
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12 or _la==26:
                self.state = 324
                localctx.params = self.param_list()


            self.state = 327
            self.match(FileParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._param_declr = None # Param_declrContext
            self.params = list() # of Param_declrContexts

        def param_declr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FileParser.Param_declrContext)
            else:
                return self.getTypedRuleContext(FileParser.Param_declrContext,i)


        def getRuleIndex(self):
            return FileParser.RULE_param_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam_list" ):
                listener.enterParam_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam_list" ):
                listener.exitParam_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam_list" ):
                return visitor.visitParam_list(self)
            else:
                return visitor.visitChildren(self)




    def param_list(self):

        localctx = FileParser.Param_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_param_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 329
            localctx._param_declr = self.param_declr()
            localctx.params.append(localctx._param_declr)
            self.state = 334
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==3:
                self.state = 330
                self.match(FileParser.T__2)
                self.state = 331
                localctx._param_declr = self.param_declr()
                localctx.params.append(localctx._param_declr)
                self.state = 336
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_declrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.const = None # Token
            self.type_ = None # Token
            self.reference = None # Token
            self._STR = None # Token
            self.ptr = list() # of Tokens
            self.var = None # Token
            self.default = None # ExprContext

        def TYPE(self):
            return self.getToken(FileParser.TYPE, 0)

        def VAR_NAME(self):
            return self.getToken(FileParser.VAR_NAME, 0)

        def ASSIGN(self):
            return self.getToken(FileParser.ASSIGN, 0)

        def CONST(self):
            return self.getToken(FileParser.CONST, 0)

        def expr(self):
            return self.getTypedRuleContext(FileParser.ExprContext,0)


        def ADDR(self):
            return self.getToken(FileParser.ADDR, 0)

        def STR(self, i:int=None):
            if i is None:
                return self.getTokens(FileParser.STR)
            else:
                return self.getToken(FileParser.STR, i)

        def getRuleIndex(self):
            return FileParser.RULE_param_declr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam_declr" ):
                listener.enterParam_declr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam_declr" ):
                listener.exitParam_declr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam_declr" ):
                return visitor.visitParam_declr(self)
            else:
                return visitor.visitChildren(self)




    def param_declr(self):

        localctx = FileParser.Param_declrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_param_declr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 338
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 337
                localctx.const = self.match(FileParser.CONST)


            self.state = 340
            localctx.type_ = self.match(FileParser.TYPE)
            self.state = 359
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.state = 342
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==51:
                    self.state = 341
                    localctx.reference = self.match(FileParser.ADDR)


                self.state = 347
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==36:
                    self.state = 344
                    localctx._STR = self.match(FileParser.STR)
                    localctx.ptr.append(localctx._STR)
                    self.state = 349
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 353
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==36:
                    self.state = 350
                    localctx._STR = self.match(FileParser.STR)
                    localctx.ptr.append(localctx._STR)
                    self.state = 355
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 357
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==51:
                    self.state = 356
                    localctx.reference = self.match(FileParser.ADDR)


                pass


            self.state = 361
            localctx.var = self.match(FileParser.VAR_NAME)
            self.state = 364
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50:
                self.state = 362
                self.match(FileParser.ASSIGN)
                self.state = 363
                localctx.default = self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Token
            self.args = None # Arg_listContext

        def VAR_NAME(self):
            return self.getToken(FileParser.VAR_NAME, 0)

        def arg_list(self):
            return self.getTypedRuleContext(FileParser.Arg_listContext,0)


        def getRuleIndex(self):
            return FileParser.RULE_func_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_call" ):
                listener.enterFunc_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_call" ):
                listener.exitFunc_call(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_call" ):
                return visitor.visitFunc_call(self)
            else:
                return visitor.visitChildren(self)




    def func_call(self):

        localctx = FileParser.Func_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_func_call)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 366
            localctx.name = self.match(FileParser.VAR_NAME)
            self.state = 367
            self.match(FileParser.T__3)
            self.state = 369
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 16327317638875152) != 0):
                self.state = 368
                localctx.args = self.arg_list()


            self.state = 371
            self.match(FileParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arg_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._func_arg = None # Func_argContext
            self.args = list() # of Func_argContexts

        def func_arg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FileParser.Func_argContext)
            else:
                return self.getTypedRuleContext(FileParser.Func_argContext,i)


        def getRuleIndex(self):
            return FileParser.RULE_arg_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArg_list" ):
                listener.enterArg_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArg_list" ):
                listener.exitArg_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArg_list" ):
                return visitor.visitArg_list(self)
            else:
                return visitor.visitChildren(self)




    def arg_list(self):

        localctx = FileParser.Arg_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_arg_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 373
            localctx._func_arg = self.func_arg()
            localctx.args.append(localctx._func_arg)
            self.state = 378
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,51,self._ctx)
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1+1:
                    self.state = 374
                    self.match(FileParser.T__2)
                    self.state = 375
                    localctx._func_arg = self.func_arg()
                    localctx.args.append(localctx._func_arg) 
                self.state = 380
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,51,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rvar(self):
            return self.getTypedRuleContext(FileParser.RvarContext,0)


        def deref(self):
            return self.getTypedRuleContext(FileParser.DerefContext,0)


        def func_call(self):
            return self.getTypedRuleContext(FileParser.Func_callContext,0)


        def rtype(self):
            return self.getTypedRuleContext(FileParser.RtypeContext,0)


        def expr(self):
            return self.getTypedRuleContext(FileParser.ExprContext,0)


        def getRuleIndex(self):
            return FileParser.RULE_func_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_arg" ):
                listener.enterFunc_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_arg" ):
                listener.exitFunc_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_arg" ):
                return visitor.visitFunc_arg(self)
            else:
                return visitor.visitChildren(self)




    def func_arg(self):

        localctx = FileParser.Func_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_func_arg)
        try:
            self.state = 386
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 381
                self.rvar()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 382
                self.deref()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 383
                self.func_call()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 384
                self.rtype()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 385
                self.expr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_scopeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def printf(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FileParser.PrintfContext)
            else:
                return self.getTypedRuleContext(FileParser.PrintfContext,i)


        def scanf(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FileParser.ScanfContext)
            else:
                return self.getTypedRuleContext(FileParser.ScanfContext,i)


        def if_cond(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FileParser.If_condContext)
            else:
                return self.getTypedRuleContext(FileParser.If_condContext,i)


        def switch_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FileParser.Switch_instrContext)
            else:
                return self.getTypedRuleContext(FileParser.Switch_instrContext,i)


        def while_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FileParser.While_loopContext)
            else:
                return self.getTypedRuleContext(FileParser.While_loopContext,i)


        def for_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FileParser.For_loopContext)
            else:
                return self.getTypedRuleContext(FileParser.For_loopContext,i)


        def assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FileParser.AssignContext)
            else:
                return self.getTypedRuleContext(FileParser.AssignContext,i)


        def comp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FileParser.CompContext)
            else:
                return self.getTypedRuleContext(FileParser.CompContext,i)


        def instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FileParser.InstrContext)
            else:
                return self.getTypedRuleContext(FileParser.InstrContext,i)


        def return_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FileParser.Return_instrContext)
            else:
                return self.getTypedRuleContext(FileParser.Return_instrContext,i)


        def comment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FileParser.CommentContext)
            else:
                return self.getTypedRuleContext(FileParser.CommentContext,i)


        def DELIM(self, i:int=None):
            if i is None:
                return self.getTokens(FileParser.DELIM)
            else:
                return self.getToken(FileParser.DELIM, i)

        def getRuleIndex(self):
            return FileParser.RULE_func_scope

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_scope" ):
                listener.enterFunc_scope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_scope" ):
                listener.exitFunc_scope(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_scope" ):
                return visitor.visitFunc_scope(self)
            else:
                return visitor.visitChildren(self)




    def func_scope(self):

        localctx = FileParser.Func_scopeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_func_scope)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 388
            self.match(FileParser.T__5)
            self.state = 470
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 3475091831824955472) != 0):
                self.state = 468
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
                if la_ == 1:
                    self.state = 389
                    self.printf()
                    self.state = 396
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 391 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 390
                            self.match(FileParser.T__0)
                            self.state = 393 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [59]:
                        self.state = 395
                        self.match(FileParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 2:
                    self.state = 398
                    self.scanf()
                    self.state = 405
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 400 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 399
                            self.match(FileParser.T__0)
                            self.state = 402 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [59]:
                        self.state = 404
                        self.match(FileParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 3:
                    self.state = 407
                    self.if_cond()
                    self.state = 415
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 4, 6, 7, 11, 12, 13, 15, 16, 19, 22, 23, 24, 26, 28, 29, 30, 31, 32, 33, 35, 36, 39, 40, 49, 51, 52, 53, 60, 61]:
                        self.state = 411
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 408
                            self.match(FileParser.T__0)
                            self.state = 413
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [59]:
                        self.state = 414
                        self.match(FileParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 4:
                    self.state = 417
                    self.switch_instr()
                    self.state = 425
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 4, 6, 7, 11, 12, 13, 15, 16, 19, 22, 23, 24, 26, 28, 29, 30, 31, 32, 33, 35, 36, 39, 40, 49, 51, 52, 53, 60, 61]:
                        self.state = 421
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 418
                            self.match(FileParser.T__0)
                            self.state = 423
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [59]:
                        self.state = 424
                        self.match(FileParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 5:
                    self.state = 427
                    self.while_loop()
                    self.state = 435
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 4, 6, 7, 11, 12, 13, 15, 16, 19, 22, 23, 24, 26, 28, 29, 30, 31, 32, 33, 35, 36, 39, 40, 49, 51, 52, 53, 60, 61]:
                        self.state = 431
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 428
                            self.match(FileParser.T__0)
                            self.state = 433
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [59]:
                        self.state = 434
                        self.match(FileParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 6:
                    self.state = 437
                    self.for_loop()
                    self.state = 445
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 4, 6, 7, 11, 12, 13, 15, 16, 19, 22, 23, 24, 26, 28, 29, 30, 31, 32, 33, 35, 36, 39, 40, 49, 51, 52, 53, 60, 61]:
                        self.state = 441
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 438
                            self.match(FileParser.T__0)
                            self.state = 443
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [59]:
                        self.state = 444
                        self.match(FileParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 7:
                    self.state = 447
                    self.assign()
                    self.state = 454
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 449 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 448
                            self.match(FileParser.T__0)
                            self.state = 451 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [59]:
                        self.state = 453
                        self.match(FileParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 8:
                    self.state = 456
                    self.comp()
                    self.state = 463
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 458 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 457
                            self.match(FileParser.T__0)
                            self.state = 460 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [59]:
                        self.state = 462
                        self.match(FileParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 9:
                    self.state = 465
                    self.instr()
                    pass

                elif la_ == 10:
                    self.state = 466
                    self.return_instr()
                    pass

                elif la_ == 11:
                    self.state = 467
                    self.comment()
                    pass


                self.state = 472
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 473
            self.match(FileParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScopeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def printf(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FileParser.PrintfContext)
            else:
                return self.getTypedRuleContext(FileParser.PrintfContext,i)


        def scanf(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FileParser.ScanfContext)
            else:
                return self.getTypedRuleContext(FileParser.ScanfContext,i)


        def if_cond(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FileParser.If_condContext)
            else:
                return self.getTypedRuleContext(FileParser.If_condContext,i)


        def switch_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FileParser.Switch_instrContext)
            else:
                return self.getTypedRuleContext(FileParser.Switch_instrContext,i)


        def while_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FileParser.While_loopContext)
            else:
                return self.getTypedRuleContext(FileParser.While_loopContext,i)


        def for_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FileParser.For_loopContext)
            else:
                return self.getTypedRuleContext(FileParser.For_loopContext,i)


        def assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FileParser.AssignContext)
            else:
                return self.getTypedRuleContext(FileParser.AssignContext,i)


        def comp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FileParser.CompContext)
            else:
                return self.getTypedRuleContext(FileParser.CompContext,i)


        def break_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FileParser.Break_instrContext)
            else:
                return self.getTypedRuleContext(FileParser.Break_instrContext,i)


        def cont_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FileParser.Cont_instrContext)
            else:
                return self.getTypedRuleContext(FileParser.Cont_instrContext,i)


        def instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FileParser.InstrContext)
            else:
                return self.getTypedRuleContext(FileParser.InstrContext,i)


        def return_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FileParser.Return_instrContext)
            else:
                return self.getTypedRuleContext(FileParser.Return_instrContext,i)


        def comment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FileParser.CommentContext)
            else:
                return self.getTypedRuleContext(FileParser.CommentContext,i)


        def DELIM(self, i:int=None):
            if i is None:
                return self.getTokens(FileParser.DELIM)
            else:
                return self.getToken(FileParser.DELIM, i)

        def getRuleIndex(self):
            return FileParser.RULE_scope

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScope" ):
                listener.enterScope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScope" ):
                listener.exitScope(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScope" ):
                return visitor.visitScope(self)
            else:
                return visitor.visitChildren(self)




    def scope(self):

        localctx = FileParser.ScopeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_scope)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 475
            self.match(FileParser.T__5)
            self.state = 559
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 3475091831825348688) != 0):
                self.state = 557
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
                if la_ == 1:
                    self.state = 476
                    self.printf()
                    self.state = 483
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 478 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 477
                            self.match(FileParser.T__0)
                            self.state = 480 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [59]:
                        self.state = 482
                        self.match(FileParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 2:
                    self.state = 485
                    self.scanf()
                    self.state = 492
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 487 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 486
                            self.match(FileParser.T__0)
                            self.state = 489 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [59]:
                        self.state = 491
                        self.match(FileParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 3:
                    self.state = 494
                    self.if_cond()
                    self.state = 502
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 4, 6, 7, 11, 12, 13, 15, 16, 17, 18, 19, 22, 23, 24, 26, 28, 29, 30, 31, 32, 33, 35, 36, 39, 40, 49, 51, 52, 53, 60, 61]:
                        self.state = 498
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 495
                            self.match(FileParser.T__0)
                            self.state = 500
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [59]:
                        self.state = 501
                        self.match(FileParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 4:
                    self.state = 504
                    self.switch_instr()
                    self.state = 512
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 4, 6, 7, 11, 12, 13, 15, 16, 17, 18, 19, 22, 23, 24, 26, 28, 29, 30, 31, 32, 33, 35, 36, 39, 40, 49, 51, 52, 53, 60, 61]:
                        self.state = 508
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 505
                            self.match(FileParser.T__0)
                            self.state = 510
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [59]:
                        self.state = 511
                        self.match(FileParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 5:
                    self.state = 514
                    self.while_loop()
                    self.state = 522
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 4, 6, 7, 11, 12, 13, 15, 16, 17, 18, 19, 22, 23, 24, 26, 28, 29, 30, 31, 32, 33, 35, 36, 39, 40, 49, 51, 52, 53, 60, 61]:
                        self.state = 518
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 515
                            self.match(FileParser.T__0)
                            self.state = 520
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [59]:
                        self.state = 521
                        self.match(FileParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 6:
                    self.state = 524
                    self.for_loop()
                    self.state = 532
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 4, 6, 7, 11, 12, 13, 15, 16, 17, 18, 19, 22, 23, 24, 26, 28, 29, 30, 31, 32, 33, 35, 36, 39, 40, 49, 51, 52, 53, 60, 61]:
                        self.state = 528
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 525
                            self.match(FileParser.T__0)
                            self.state = 530
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [59]:
                        self.state = 531
                        self.match(FileParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 7:
                    self.state = 534
                    self.assign()
                    self.state = 541
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 536 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 535
                            self.match(FileParser.T__0)
                            self.state = 538 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [59]:
                        self.state = 540
                        self.match(FileParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 8:
                    self.state = 543
                    self.comp()
                    self.state = 550
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 545 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 544
                            self.match(FileParser.T__0)
                            self.state = 547 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [59]:
                        self.state = 549
                        self.match(FileParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 9:
                    self.state = 552
                    self.break_instr()
                    pass

                elif la_ == 10:
                    self.state = 553
                    self.cont_instr()
                    pass

                elif la_ == 11:
                    self.state = 554
                    self.instr()
                    pass

                elif la_ == 12:
                    self.state = 555
                    self.return_instr()
                    pass

                elif la_ == 13:
                    self.state = 556
                    self.comment()
                    pass


                self.state = 561
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 562
            self.match(FileParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Return_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ret_val = None # ExprContext

        def RETURN(self):
            return self.getToken(FileParser.RETURN, 0)

        def instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FileParser.InstrContext)
            else:
                return self.getTypedRuleContext(FileParser.InstrContext,i)


        def return_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FileParser.Return_instrContext)
            else:
                return self.getTypedRuleContext(FileParser.Return_instrContext,i)


        def expr(self):
            return self.getTypedRuleContext(FileParser.ExprContext,0)


        def getRuleIndex(self):
            return FileParser.RULE_return_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_instr" ):
                listener.enterReturn_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_instr" ):
                listener.exitReturn_instr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturn_instr" ):
                return visitor.visitReturn_instr(self)
            else:
                return visitor.visitChildren(self)




    def return_instr(self):

        localctx = FileParser.Return_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_return_instr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 564
            self.match(FileParser.RETURN)
            self.state = 566
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 16327317638875152) != 0):
                self.state = 565
                localctx.ret_val = self.expr(0)


            self.state = 568
            self.match(FileParser.T__0)
            self.state = 573
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,91,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 571
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [4, 6, 11, 12, 26, 28, 29, 30, 31, 32, 33, 35, 36, 39, 40, 49, 51, 52, 53]:
                        self.state = 569
                        self.instr()
                        pass
                    elif token in [23]:
                        self.state = 570
                        self.return_instr()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 575
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,91,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.switch_cond = None # ExprContext
            self._case_instr = None # Case_instrContext
            self.case_list = list() # of Case_instrContexts
            self.default = None # Default_instrContext

        def SWITCH(self):
            return self.getToken(FileParser.SWITCH, 0)

        def expr(self):
            return self.getTypedRuleContext(FileParser.ExprContext,0)


        def case_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FileParser.Case_instrContext)
            else:
                return self.getTypedRuleContext(FileParser.Case_instrContext,i)


        def default_instr(self):
            return self.getTypedRuleContext(FileParser.Default_instrContext,0)


        def getRuleIndex(self):
            return FileParser.RULE_switch_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_instr" ):
                listener.enterSwitch_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_instr" ):
                listener.exitSwitch_instr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitch_instr" ):
                return visitor.visitSwitch_instr(self)
            else:
                return visitor.visitChildren(self)




    def switch_instr(self):

        localctx = FileParser.Switch_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_switch_instr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 576
            self.match(FileParser.SWITCH)
            self.state = 577
            self.match(FileParser.T__3)
            self.state = 578
            localctx.switch_cond = self.expr(0)
            self.state = 579
            self.match(FileParser.T__4)
            self.state = 580
            self.match(FileParser.T__5)
            self.state = 584
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==20:
                self.state = 581
                localctx._case_instr = self.case_instr()
                localctx.case_list.append(localctx._case_instr)
                self.state = 586
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 588
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==21:
                self.state = 587
                localctx.default = self.default_instr()


            self.state = 590
            self.match(FileParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.case_cond = None # ExprContext

        def CASE(self):
            return self.getToken(FileParser.CASE, 0)

        def switch_scope(self):
            return self.getTypedRuleContext(FileParser.Switch_scopeContext,0)


        def expr(self):
            return self.getTypedRuleContext(FileParser.ExprContext,0)


        def getRuleIndex(self):
            return FileParser.RULE_case_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_instr" ):
                listener.enterCase_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_instr" ):
                listener.exitCase_instr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCase_instr" ):
                return visitor.visitCase_instr(self)
            else:
                return visitor.visitChildren(self)




    def case_instr(self):

        localctx = FileParser.Case_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_case_instr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 592
            self.match(FileParser.CASE)
            self.state = 593
            localctx.case_cond = self.expr(0)
            self.state = 594
            self.match(FileParser.T__7)
            self.state = 595
            self.switch_scope()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(FileParser.DEFAULT, 0)

        def switch_scope(self):
            return self.getTypedRuleContext(FileParser.Switch_scopeContext,0)


        def getRuleIndex(self):
            return FileParser.RULE_default_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_instr" ):
                listener.enterDefault_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_instr" ):
                listener.exitDefault_instr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefault_instr" ):
                return visitor.visitDefault_instr(self)
            else:
                return visitor.visitChildren(self)




    def default_instr(self):

        localctx = FileParser.Default_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_default_instr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 597
            self.match(FileParser.DEFAULT)
            self.state = 598
            self.match(FileParser.T__7)
            self.state = 599
            self.switch_scope()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Switch_scopeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def printf(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FileParser.PrintfContext)
            else:
                return self.getTypedRuleContext(FileParser.PrintfContext,i)


        def scanf(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FileParser.ScanfContext)
            else:
                return self.getTypedRuleContext(FileParser.ScanfContext,i)


        def if_cond(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FileParser.If_condContext)
            else:
                return self.getTypedRuleContext(FileParser.If_condContext,i)


        def switch_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FileParser.Switch_instrContext)
            else:
                return self.getTypedRuleContext(FileParser.Switch_instrContext,i)


        def while_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FileParser.While_loopContext)
            else:
                return self.getTypedRuleContext(FileParser.While_loopContext,i)


        def for_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FileParser.For_loopContext)
            else:
                return self.getTypedRuleContext(FileParser.For_loopContext,i)


        def assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FileParser.AssignContext)
            else:
                return self.getTypedRuleContext(FileParser.AssignContext,i)


        def comp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FileParser.CompContext)
            else:
                return self.getTypedRuleContext(FileParser.CompContext,i)


        def break_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FileParser.Break_instrContext)
            else:
                return self.getTypedRuleContext(FileParser.Break_instrContext,i)


        def cont_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FileParser.Cont_instrContext)
            else:
                return self.getTypedRuleContext(FileParser.Cont_instrContext,i)


        def instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FileParser.InstrContext)
            else:
                return self.getTypedRuleContext(FileParser.InstrContext,i)


        def return_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FileParser.Return_instrContext)
            else:
                return self.getTypedRuleContext(FileParser.Return_instrContext,i)


        def comment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FileParser.CommentContext)
            else:
                return self.getTypedRuleContext(FileParser.CommentContext,i)


        def DELIM(self, i:int=None):
            if i is None:
                return self.getTokens(FileParser.DELIM)
            else:
                return self.getToken(FileParser.DELIM, i)

        def getRuleIndex(self):
            return FileParser.RULE_switch_scope

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_scope" ):
                listener.enterSwitch_scope(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_scope" ):
                listener.exitSwitch_scope(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitch_scope" ):
                return visitor.visitSwitch_scope(self)
            else:
                return visitor.visitChildren(self)




    def switch_scope(self):

        localctx = FileParser.Switch_scopeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_switch_scope)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 684
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 3475091831825348688) != 0):
                self.state = 682
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
                if la_ == 1:
                    self.state = 601
                    self.printf()
                    self.state = 608
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 603 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 602
                            self.match(FileParser.T__0)
                            self.state = 605 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [59]:
                        self.state = 607
                        self.match(FileParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 2:
                    self.state = 610
                    self.scanf()
                    self.state = 617
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 612 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 611
                            self.match(FileParser.T__0)
                            self.state = 614 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [59]:
                        self.state = 616
                        self.match(FileParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 3:
                    self.state = 619
                    self.if_cond()
                    self.state = 627
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 4, 6, 7, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 28, 29, 30, 31, 32, 33, 35, 36, 39, 40, 49, 51, 52, 53, 60, 61]:
                        self.state = 623
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 620
                            self.match(FileParser.T__0)
                            self.state = 625
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [59]:
                        self.state = 626
                        self.match(FileParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 4:
                    self.state = 629
                    self.switch_instr()
                    self.state = 637
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 4, 6, 7, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 28, 29, 30, 31, 32, 33, 35, 36, 39, 40, 49, 51, 52, 53, 60, 61]:
                        self.state = 633
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 630
                            self.match(FileParser.T__0)
                            self.state = 635
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [59]:
                        self.state = 636
                        self.match(FileParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 5:
                    self.state = 639
                    self.while_loop()
                    self.state = 647
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 4, 6, 7, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 28, 29, 30, 31, 32, 33, 35, 36, 39, 40, 49, 51, 52, 53, 60, 61]:
                        self.state = 643
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 640
                            self.match(FileParser.T__0)
                            self.state = 645
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [59]:
                        self.state = 646
                        self.match(FileParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 6:
                    self.state = 649
                    self.for_loop()
                    self.state = 657
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 4, 6, 7, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 28, 29, 30, 31, 32, 33, 35, 36, 39, 40, 49, 51, 52, 53, 60, 61]:
                        self.state = 653
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 650
                            self.match(FileParser.T__0)
                            self.state = 655
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    elif token in [59]:
                        self.state = 656
                        self.match(FileParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 7:
                    self.state = 659
                    self.assign()
                    self.state = 666
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 661 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 660
                            self.match(FileParser.T__0)
                            self.state = 663 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [59]:
                        self.state = 665
                        self.match(FileParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 8:
                    self.state = 668
                    self.comp()
                    self.state = 675
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 670 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 669
                            self.match(FileParser.T__0)
                            self.state = 672 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==1):
                                break

                        pass
                    elif token in [59]:
                        self.state = 674
                        self.match(FileParser.DELIM)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 9:
                    self.state = 677
                    self.break_instr()
                    pass

                elif la_ == 10:
                    self.state = 678
                    self.cont_instr()
                    pass

                elif la_ == 11:
                    self.state = 679
                    self.instr()
                    pass

                elif la_ == 12:
                    self.state = 680
                    self.return_instr()
                    pass

                elif la_ == 13:
                    self.state = 681
                    self.comment()
                    pass


                self.state = 686
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cont_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(FileParser.CONTINUE, 0)

        def DELIM(self):
            return self.getToken(FileParser.DELIM, 0)

        def instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FileParser.InstrContext)
            else:
                return self.getTypedRuleContext(FileParser.InstrContext,i)


        def getRuleIndex(self):
            return FileParser.RULE_cont_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCont_instr" ):
                listener.enterCont_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCont_instr" ):
                listener.exitCont_instr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCont_instr" ):
                return visitor.visitCont_instr(self)
            else:
                return visitor.visitChildren(self)




    def cont_instr(self):

        localctx = FileParser.Cont_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_cont_instr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 687
            self.match(FileParser.CONTINUE)
            self.state = 688
            _la = self._input.LA(1)
            if not(_la==1 or _la==59):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 692
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,112,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 689
                    self.instr() 
                self.state = 694
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,112,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Break_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(FileParser.BREAK, 0)

        def DELIM(self):
            return self.getToken(FileParser.DELIM, 0)

        def instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FileParser.InstrContext)
            else:
                return self.getTypedRuleContext(FileParser.InstrContext,i)


        def getRuleIndex(self):
            return FileParser.RULE_break_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreak_instr" ):
                listener.enterBreak_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreak_instr" ):
                listener.exitBreak_instr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreak_instr" ):
                return visitor.visitBreak_instr(self)
            else:
                return visitor.visitChildren(self)




    def break_instr(self):

        localctx = FileParser.Break_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_break_instr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 695
            self.match(FileParser.BREAK)
            self.state = 696
            _la = self._input.LA(1)
            if not(_la==1 or _la==59):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 700
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,113,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 697
                    self.instr() 
                self.state = 702
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,113,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_condContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.condition = None # CondContext

        def IF(self):
            return self.getToken(FileParser.IF, 0)

        def scope(self):
            return self.getTypedRuleContext(FileParser.ScopeContext,0)


        def cond(self):
            return self.getTypedRuleContext(FileParser.CondContext,0)


        def else_cond(self):
            return self.getTypedRuleContext(FileParser.Else_condContext,0)


        def getRuleIndex(self):
            return FileParser.RULE_if_cond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_cond" ):
                listener.enterIf_cond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_cond" ):
                listener.exitIf_cond(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf_cond" ):
                return visitor.visitIf_cond(self)
            else:
                return visitor.visitChildren(self)




    def if_cond(self):

        localctx = FileParser.If_condContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_if_cond)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 703
            self.match(FileParser.IF)
            self.state = 704
            self.match(FileParser.T__3)
            self.state = 705
            localctx.condition = self.cond()
            self.state = 706
            self.match(FileParser.T__4)
            self.state = 707
            self.scope()
            self.state = 709
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 708
                self.else_cond()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_condContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(FileParser.ELSE, 0)

        def scope(self):
            return self.getTypedRuleContext(FileParser.ScopeContext,0)


        def getRuleIndex(self):
            return FileParser.RULE_else_cond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_cond" ):
                listener.enterElse_cond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_cond" ):
                listener.exitElse_cond(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElse_cond" ):
                return visitor.visitElse_cond(self)
            else:
                return visitor.visitChildren(self)




    def else_cond(self):

        localctx = FileParser.Else_condContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_else_cond)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 711
            self.match(FileParser.ELSE)
            self.state = 712
            self.scope()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class While_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.condition = None # CondContext

        def WHILE(self):
            return self.getToken(FileParser.WHILE, 0)

        def scope(self):
            return self.getTypedRuleContext(FileParser.ScopeContext,0)


        def cond(self):
            return self.getTypedRuleContext(FileParser.CondContext,0)


        def getRuleIndex(self):
            return FileParser.RULE_while_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_loop" ):
                listener.enterWhile_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_loop" ):
                listener.exitWhile_loop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhile_loop" ):
                return visitor.visitWhile_loop(self)
            else:
                return visitor.visitChildren(self)




    def while_loop(self):

        localctx = FileParser.While_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_while_loop)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 714
            self.match(FileParser.WHILE)
            self.state = 715
            self.match(FileParser.T__3)
            self.state = 716
            localctx.condition = self.cond()
            self.state = 717
            self.match(FileParser.T__4)
            self.state = 718
            self.scope()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.initialization = None # InitContext
            self.condition = None # CondContext
            self.increment = None # IncrContext

        def FOR(self):
            return self.getToken(FileParser.FOR, 0)

        def scope(self):
            return self.getTypedRuleContext(FileParser.ScopeContext,0)


        def init(self):
            return self.getTypedRuleContext(FileParser.InitContext,0)


        def cond(self):
            return self.getTypedRuleContext(FileParser.CondContext,0)


        def incr(self):
            return self.getTypedRuleContext(FileParser.IncrContext,0)


        def getRuleIndex(self):
            return FileParser.RULE_for_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_loop" ):
                listener.enterFor_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_loop" ):
                listener.exitFor_loop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_loop" ):
                return visitor.visitFor_loop(self)
            else:
                return visitor.visitChildren(self)




    def for_loop(self):

        localctx = FileParser.For_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_for_loop)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 720
            self.match(FileParser.FOR)
            self.state = 721
            self.match(FileParser.T__3)
            self.state = 722
            localctx.initialization = self.init()
            self.state = 723
            self.match(FileParser.T__0)
            self.state = 724
            localctx.condition = self.cond()
            self.state = 725
            self.match(FileParser.T__0)
            self.state = 726
            localctx.increment = self.incr()
            self.state = 727
            self.match(FileParser.T__4)
            self.state = 728
            self.scope()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(FileParser.TYPE, 0)

        def lvar(self):
            return self.getTypedRuleContext(FileParser.LvarContext,0)


        def ASSIGN(self):
            return self.getToken(FileParser.ASSIGN, 0)

        def expr(self):
            return self.getTypedRuleContext(FileParser.ExprContext,0)


        def assign(self):
            return self.getTypedRuleContext(FileParser.AssignContext,0)


        def getRuleIndex(self):
            return FileParser.RULE_init

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInit" ):
                listener.enterInit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInit" ):
                listener.exitInit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInit" ):
                return visitor.visitInit(self)
            else:
                return visitor.visitChildren(self)




    def init(self):

        localctx = FileParser.InitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_init)
        try:
            self.state = 736
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [26]:
                self.enterOuterAlt(localctx, 1)
                self.state = 730
                self.match(FileParser.TYPE)
                self.state = 731
                self.lvar()
                self.state = 732
                self.match(FileParser.ASSIGN)
                self.state = 733
                self.expr(0)
                pass
            elif token in [29, 36]:
                self.enterOuterAlt(localctx, 2)
                self.state = 735
                self.assign()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.const = None # Token
            self.type_ = None # Token
            self._STR = None # Token
            self.ptr = list() # of Tokens
            self.name = None # Token
            self.size = None # Token
            self._rtype = None # RtypeContext
            self.values = list() # of RtypeContexts

        def ASSIGN(self):
            return self.getToken(FileParser.ASSIGN, 0)

        def TYPE(self):
            return self.getToken(FileParser.TYPE, 0)

        def VAR_NAME(self):
            return self.getToken(FileParser.VAR_NAME, 0)

        def rtype(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FileParser.RtypeContext)
            else:
                return self.getTypedRuleContext(FileParser.RtypeContext,i)


        def CONST(self):
            return self.getToken(FileParser.CONST, 0)

        def STR(self, i:int=None):
            if i is None:
                return self.getTokens(FileParser.STR)
            else:
                return self.getToken(FileParser.STR, i)

        def INT(self):
            return self.getToken(FileParser.INT, 0)

        def getRuleIndex(self):
            return FileParser.RULE_array_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_decl" ):
                listener.enterArray_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_decl" ):
                listener.exitArray_decl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArray_decl" ):
                return visitor.visitArray_decl(self)
            else:
                return visitor.visitChildren(self)




    def array_decl(self):

        localctx = FileParser.Array_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_array_decl)
        self._la = 0 # Token type
        try:
            self.state = 781
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 739
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==12:
                    self.state = 738
                    localctx.const = self.match(FileParser.CONST)


                self.state = 741
                localctx.type_ = self.match(FileParser.TYPE)
                self.state = 745
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==36:
                    self.state = 742
                    localctx._STR = self.match(FileParser.STR)
                    localctx.ptr.append(localctx._STR)
                    self.state = 747
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 748
                localctx.name = self.match(FileParser.VAR_NAME)
                self.state = 749
                self.match(FileParser.T__8)
                self.state = 751
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==30:
                    self.state = 750
                    localctx.size = self.match(FileParser.INT)


                self.state = 753
                self.match(FileParser.T__9)
                self.state = 754
                self.match(FileParser.ASSIGN)
                self.state = 755
                self.match(FileParser.T__5)
                self.state = 761
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,119,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 756
                        localctx._rtype = self.rtype()
                        localctx.values.append(localctx._rtype)
                        self.state = 757
                        self.match(FileParser.T__2) 
                    self.state = 763
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,119,self._ctx)

                self.state = 764
                localctx._rtype = self.rtype()
                localctx.values.append(localctx._rtype)
                self.state = 765
                self.match(FileParser.T__6)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 768
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==12:
                    self.state = 767
                    localctx.const = self.match(FileParser.CONST)


                self.state = 770
                localctx.type_ = self.match(FileParser.TYPE)
                self.state = 774
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==36:
                    self.state = 771
                    localctx._STR = self.match(FileParser.STR)
                    localctx.ptr.append(localctx._STR)
                    self.state = 776
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 777
                localctx.name = self.match(FileParser.VAR_NAME)
                self.state = 778
                self.match(FileParser.T__8)
                self.state = 779
                localctx.size = self.match(FileParser.INT)
                self.state = 780
                self.match(FileParser.T__9)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comp(self):
            return self.getTypedRuleContext(FileParser.CompContext,0)


        def expr(self):
            return self.getTypedRuleContext(FileParser.ExprContext,0)


        def getRuleIndex(self):
            return FileParser.RULE_cond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCond" ):
                listener.enterCond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCond" ):
                listener.exitCond(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCond" ):
                return visitor.visitCond(self)
            else:
                return visitor.visitChildren(self)




    def cond(self):

        localctx = FileParser.CondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_cond)
        try:
            self.state = 785
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 783
                self.comp()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 784
                self.expr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IncrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCR(self):
            return self.getToken(FileParser.INCR, 0)

        def rvar(self):
            return self.getTypedRuleContext(FileParser.RvarContext,0)


        def DECR(self):
            return self.getToken(FileParser.DECR, 0)

        def getRuleIndex(self):
            return FileParser.RULE_incr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIncr" ):
                listener.enterIncr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIncr" ):
                listener.exitIncr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIncr" ):
                return visitor.visitIncr(self)
            else:
                return visitor.visitChildren(self)




    def incr(self):

        localctx = FileParser.IncrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_incr)
        try:
            self.state = 797
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 787
                self.match(FileParser.INCR)
                self.state = 788
                self.rvar()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 789
                self.match(FileParser.DECR)
                self.state = 790
                self.rvar()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 791
                self.rvar()
                self.state = 792
                self.match(FileParser.INCR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 794
                self.rvar()
                self.state = 795
                self.match(FileParser.DECR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Var_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lvar(self):
            return self.getTypedRuleContext(FileParser.LvarContext,0)


        def ASSIGN(self):
            return self.getToken(FileParser.ASSIGN, 0)

        def expr(self):
            return self.getTypedRuleContext(FileParser.ExprContext,0)


        def getRuleIndex(self):
            return FileParser.RULE_var_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVar_decl" ):
                listener.enterVar_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVar_decl" ):
                listener.exitVar_decl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVar_decl" ):
                return visitor.visitVar_decl(self)
            else:
                return visitor.visitChildren(self)




    def var_decl(self):

        localctx = FileParser.Var_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_var_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 799
            self.lvar()
            self.state = 802
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50:
                self.state = 800
                self.match(FileParser.ASSIGN)
                self.state = 801
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGN(self):
            return self.getToken(FileParser.ASSIGN, 0)

        def expr(self):
            return self.getTypedRuleContext(FileParser.ExprContext,0)


        def rvar(self):
            return self.getTypedRuleContext(FileParser.RvarContext,0)


        def deref(self):
            return self.getTypedRuleContext(FileParser.DerefContext,0)


        def array_el(self):
            return self.getTypedRuleContext(FileParser.Array_elContext,0)


        def getRuleIndex(self):
            return FileParser.RULE_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign" ):
                listener.enterAssign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign" ):
                listener.exitAssign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssign" ):
                return visitor.visitAssign(self)
            else:
                return visitor.visitChildren(self)




    def assign(self):

        localctx = FileParser.AssignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 807
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.state = 804
                self.rvar()
                pass

            elif la_ == 2:
                self.state = 805
                self.deref()
                pass

            elif la_ == 3:
                self.state = 806
                self.array_el()
                pass


            self.state = 809
            self.match(FileParser.ASSIGN)
            self.state = 810
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_elContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.index = None # Token

        def lvar(self):
            return self.getTypedRuleContext(FileParser.LvarContext,0)


        def deref(self):
            return self.getTypedRuleContext(FileParser.DerefContext,0)


        def expr(self):
            return self.getTypedRuleContext(FileParser.ExprContext,0)


        def INT(self):
            return self.getToken(FileParser.INT, 0)

        def getRuleIndex(self):
            return FileParser.RULE_array_el

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_el" ):
                listener.enterArray_el(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_el" ):
                listener.exitArray_el(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArray_el" ):
                return visitor.visitArray_el(self)
            else:
                return visitor.visitChildren(self)




    def array_el(self):

        localctx = FileParser.Array_elContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_array_el)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 814
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
            if la_ == 1:
                self.state = 812
                self.lvar()
                pass

            elif la_ == 2:
                self.state = 813
                self.deref()
                pass


            self.state = 816
            self.match(FileParser.T__8)
            self.state = 819
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
            if la_ == 1:
                self.state = 817
                localctx.index = self.match(FileParser.INT)
                pass

            elif la_ == 2:
                self.state = 818
                self.expr(0)
                pass


            self.state = 821
            self.match(FileParser.T__9)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DerefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STR(self):
            return self.getToken(FileParser.STR, 0)

        def deref(self):
            return self.getTypedRuleContext(FileParser.DerefContext,0)


        def rvar(self):
            return self.getTypedRuleContext(FileParser.RvarContext,0)


        def getRuleIndex(self):
            return FileParser.RULE_deref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeref" ):
                listener.enterDeref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeref" ):
                listener.exitDeref(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeref" ):
                return visitor.visitDeref(self)
            else:
                return visitor.visitChildren(self)




    def deref(self):

        localctx = FileParser.DerefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_deref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 823
            self.match(FileParser.STR)
            self.state = 826
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [36]:
                self.state = 824
                self.deref()
                pass
            elif token in [29]:
                self.state = 825
                self.rvar()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LvarContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._STR = None # Token
            self.ptr = list() # of Tokens
            self.name = None # Token

        def VAR_NAME(self):
            return self.getToken(FileParser.VAR_NAME, 0)

        def STR(self, i:int=None):
            if i is None:
                return self.getTokens(FileParser.STR)
            else:
                return self.getToken(FileParser.STR, i)

        def getRuleIndex(self):
            return FileParser.RULE_lvar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLvar" ):
                listener.enterLvar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLvar" ):
                listener.exitLvar(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLvar" ):
                return visitor.visitLvar(self)
            else:
                return visitor.visitChildren(self)




    def lvar(self):

        localctx = FileParser.LvarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_lvar)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 831
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==36:
                self.state = 828
                localctx._STR = self.match(FileParser.STR)
                localctx.ptr.append(localctx._STR)
                self.state = 833
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 834
            localctx.name = self.match(FileParser.VAR_NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RvarContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Token

        def VAR_NAME(self):
            return self.getToken(FileParser.VAR_NAME, 0)

        def getRuleIndex(self):
            return FileParser.RULE_rvar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRvar" ):
                listener.enterRvar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRvar" ):
                listener.exitRvar(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRvar" ):
                return visitor.visitRvar(self)
            else:
                return visitor.visitChildren(self)




    def rvar(self):

        localctx = FileParser.RvarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_rvar)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 836
            localctx.name = self.match(FileParser.VAR_NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.lhs = None # ExprContext
            self.op = None # Token
            self.rhs = None # ExprContext

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(FileParser.ExprContext)
            else:
                return self.getTypedRuleContext(FileParser.ExprContext,i)


        def AND_OP(self):
            return self.getToken(FileParser.AND_OP, 0)

        def OR_OP(self):
            return self.getToken(FileParser.OR_OP, 0)

        def GEQ(self):
            return self.getToken(FileParser.GEQ, 0)

        def LEQ(self):
            return self.getToken(FileParser.LEQ, 0)

        def NEQ(self):
            return self.getToken(FileParser.NEQ, 0)

        def GT(self):
            return self.getToken(FileParser.GT, 0)

        def LT(self):
            return self.getToken(FileParser.LT, 0)

        def EQ(self):
            return self.getToken(FileParser.EQ, 0)

        def getRuleIndex(self):
            return FileParser.RULE_comp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp" ):
                listener.enterComp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp" ):
                listener.exitComp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp" ):
                return visitor.visitComp(self)
            else:
                return visitor.visitChildren(self)




    def comp(self):

        localctx = FileParser.CompContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_comp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 838
            localctx.lhs = self.expr(0)
            self.state = 839
            localctx.op = self._input.LT(1)
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 560750930165760) != 0)):
                localctx.op = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 840
            localctx.rhs = self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.oper1 = None # ExprContext
            self.rhs = None # TermContext
            self.op = None # Token
            self.oper2 = None # TermContext

        def term(self):
            return self.getTypedRuleContext(FileParser.TermContext,0)


        def expr(self):
            return self.getTypedRuleContext(FileParser.ExprContext,0)


        def SUM(self):
            return self.getToken(FileParser.SUM, 0)

        def DIF(self):
            return self.getToken(FileParser.DIF, 0)

        def AND_OP(self):
            return self.getToken(FileParser.AND_OP, 0)

        def OR_OP(self):
            return self.getToken(FileParser.OR_OP, 0)

        def getRuleIndex(self):
            return FileParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr" ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = FileParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 82
        self.enterRecursionRule(localctx, 82, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 843
            localctx.rhs = self.term(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 850
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,131,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = FileParser.ExprContext(self, _parentctx, _parentState)
                    localctx.oper1 = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                    self.state = 845
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 846
                    localctx.op = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 423861732507648) != 0)):
                        localctx.op = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 847
                    localctx.oper2 = self.term(0) 
                self.state = 852
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,131,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.left_term = None # TermContext
            self.single_term = None # TermContext
            self.single_factor = None # FactorContext
            self.op = None # Token
            self.right_factor = None # FactorContext

        def factor(self):
            return self.getTypedRuleContext(FileParser.FactorContext,0)


        def NOT_OP(self):
            return self.getToken(FileParser.NOT_OP, 0)

        def term(self):
            return self.getTypedRuleContext(FileParser.TermContext,0)


        def STR(self):
            return self.getToken(FileParser.STR, 0)

        def DIV(self):
            return self.getToken(FileParser.DIV, 0)

        def MOD(self):
            return self.getToken(FileParser.MOD, 0)

        def GT(self):
            return self.getToken(FileParser.GT, 0)

        def LT(self):
            return self.getToken(FileParser.LT, 0)

        def GEQ(self):
            return self.getToken(FileParser.GEQ, 0)

        def LEQ(self):
            return self.getToken(FileParser.LEQ, 0)

        def EQ(self):
            return self.getToken(FileParser.EQ, 0)

        def NEQ(self):
            return self.getToken(FileParser.NEQ, 0)

        def INCR(self):
            return self.getToken(FileParser.INCR, 0)

        def DECR(self):
            return self.getToken(FileParser.DECR, 0)

        def getRuleIndex(self):
            return FileParser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTerm" ):
                return visitor.visitTerm(self)
            else:
                return visitor.visitChildren(self)



    def term(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = FileParser.TermContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 84
        self.enterRecursionRule(localctx, 84, self.RULE_term, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 857
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4, 11, 29, 30, 31, 32, 33, 35, 36, 39, 40, 51, 52, 53]:
                self.state = 854
                localctx.single_factor = self.factor()
                pass
            elif token in [49]:
                self.state = 855
                localctx.op = self.match(FileParser.NOT_OP)
                self.state = 856
                localctx.single_factor = self.factor()
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 866
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,134,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 864
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
                    if la_ == 1:
                        localctx = FileParser.TermContext(self, _parentctx, _parentState)
                        localctx.left_term = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_term)
                        self.state = 859
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 860
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 139019501436928) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 861
                        localctx.right_factor = self.factor()
                        pass

                    elif la_ == 2:
                        localctx = FileParser.TermContext(self, _parentctx, _parentState)
                        localctx.single_term = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_term)
                        self.state = 862
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 863
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==52 or _la==53):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

             
                self.state = 868
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,134,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class FactorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.single_primary = None # PrimaryContext
            self.op = None # Token
            self.single_factor = None # FactorContext

        def primary(self):
            return self.getTypedRuleContext(FileParser.PrimaryContext,0)


        def factor(self):
            return self.getTypedRuleContext(FileParser.FactorContext,0)


        def SUM(self):
            return self.getToken(FileParser.SUM, 0)

        def DIF(self):
            return self.getToken(FileParser.DIF, 0)

        def INCR(self):
            return self.getToken(FileParser.INCR, 0)

        def DECR(self):
            return self.getToken(FileParser.DECR, 0)

        def getRuleIndex(self):
            return FileParser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFactor" ):
                return visitor.visitFactor(self)
            else:
                return visitor.visitChildren(self)




    def factor(self):

        localctx = FileParser.FactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_factor)
        self._la = 0 # Token type
        try:
            self.state = 872
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4, 11, 29, 30, 31, 32, 33, 35, 36, 51]:
                self.enterOuterAlt(localctx, 1)
                self.state = 869
                localctx.single_primary = self.primary()
                pass
            elif token in [39, 40, 52, 53]:
                self.enterOuterAlt(localctx, 2)
                self.state = 870
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 13512448149553152) != 0)):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 871
                localctx.single_factor = self.factor()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.addr = None # Token
            self.var = None # RvarContext
            self.in_expr = None # ExprContext
            self.cast_expr = None # Token
            self.cast_val = None # PrimaryContext

        def rvar(self):
            return self.getTypedRuleContext(FileParser.RvarContext,0)


        def rtype(self):
            return self.getTypedRuleContext(FileParser.RtypeContext,0)


        def ADDR(self):
            return self.getToken(FileParser.ADDR, 0)

        def deref(self):
            return self.getTypedRuleContext(FileParser.DerefContext,0)


        def expr(self):
            return self.getTypedRuleContext(FileParser.ExprContext,0)


        def CAST(self):
            return self.getToken(FileParser.CAST, 0)

        def primary(self):
            return self.getTypedRuleContext(FileParser.PrimaryContext,0)


        def func_call(self):
            return self.getTypedRuleContext(FileParser.Func_callContext,0)


        def array_el(self):
            return self.getTypedRuleContext(FileParser.Array_elContext,0)


        def getRuleIndex(self):
            return FileParser.RULE_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary" ):
                listener.enterPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary" ):
                listener.exitPrimary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimary" ):
                return visitor.visitPrimary(self)
            else:
                return visitor.visitChildren(self)




    def primary(self):

        localctx = FileParser.PrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_primary)
        try:
            self.state = 887
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 874
                self.rvar()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 875
                self.rtype()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 876
                localctx.addr = self.match(FileParser.ADDR)
                self.state = 877
                localctx.var = self.rvar()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 878
                self.deref()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 879
                self.match(FileParser.T__3)
                self.state = 880
                localctx.in_expr = self.expr(0)
                self.state = 881
                self.match(FileParser.T__4)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 883
                localctx.cast_expr = self.match(FileParser.CAST)
                self.state = 884
                localctx.cast_val = self.primary()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 885
                self.func_call()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 886
                self.array_el()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RtypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type_ = None # Token

        def INT(self):
            return self.getToken(FileParser.INT, 0)

        def FLOAT(self):
            return self.getToken(FileParser.FLOAT, 0)

        def CHAR(self):
            return self.getToken(FileParser.CHAR, 0)

        def BOOL(self):
            return self.getToken(FileParser.BOOL, 0)

        def STRING(self):
            return self.getToken(FileParser.STRING, 0)

        def getRuleIndex(self):
            return FileParser.RULE_rtype

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRtype" ):
                listener.enterRtype(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRtype" ):
                listener.exitRtype(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRtype" ):
                return visitor.visitRtype(self)
            else:
                return visitor.visitChildren(self)




    def rtype(self):

        localctx = FileParser.RtypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_rtype)
        try:
            self.state = 894
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [30]:
                self.enterOuterAlt(localctx, 1)
                self.state = 889
                localctx.type_ = self.match(FileParser.INT)
                pass
            elif token in [31]:
                self.enterOuterAlt(localctx, 2)
                self.state = 890
                localctx.type_ = self.match(FileParser.FLOAT)
                pass
            elif token in [32]:
                self.enterOuterAlt(localctx, 3)
                self.state = 891
                localctx.type_ = self.match(FileParser.CHAR)
                pass
            elif token in [33]:
                self.enterOuterAlt(localctx, 4)
                self.state = 892
                localctx.type_ = self.match(FileParser.BOOL)
                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 5)
                self.state = 893
                self.match(FileParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[41] = self.expr_sempred
        self._predicates[42] = self.term_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 1)
         

    def term_sempred(self, localctx:TermContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 1)
         




